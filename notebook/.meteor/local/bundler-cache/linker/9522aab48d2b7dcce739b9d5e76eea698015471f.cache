[{"type":"js","data":"/* Imports for global scope */\n\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nSpiderable = Package.spiderable.Spiderable;\nsitemaps = Package['gadicohen:sitemaps'].sitemaps;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nmarked = Package['chuangbo:marked'].marked;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nBlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nFastRender = Package['meteorhacks:fast-render'].FastRender;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){// init Posts collection\nPosts = new Mongo.Collection('posts');\n\n// init Projects collection\nProjects = new Mongo.Collection('projects');\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA,4C","file":"/lib/collections.js","sourcesContent":["// init Posts collection\nPosts = new Mongo.Collection('posts');\n\n// init Projects collection\nProjects = new Mongo.Collection('projects');"]}},{"type":"js","data":"(function(){// reusable function to reset application states\nfunction reset() {\n\tSession.set('viewingBlog', false);\n\tSession.set('editing', false);\n\tSession.set('viewingProject', undefined);\n\tSession.set('editingProject', undefined);\n\tSession.set('singlePost', false);\n\tSession.set('modal', undefined);\n}\n\nFlowRouter.notFound = {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tFlowRouter.go('/');\n\t\t}\n\t}\n};\n\n// root\nFlowRouter.route('/', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tdocument.title = 'dkoo dot net';\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\n// login route\nvar accounts = FlowRouter.group({\n\tname: 'accounts'\n});\n\naccounts.route('/admin', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tif ( !!Meteor.user() ) {\n\t\t\t\tFlowRouter.go('/');\n\t\t\t} else {\n\t\t\t\treset();\n\t\t\t\tdocument.title = 'Log In';\n\t\t\t\tBlazeLayout.render('main', {content: 'admin'});\n\t\t\t}\n\t\t}\n\t}\n});\n\n// blog routes\nvar blog = FlowRouter.group({\n\tprefix: '/blog',\n\tname: 'blog'\n});\n\nblog.route('/', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tvar search = FlowRouter.getQueryParam('search');\n\n\t\t\tif ( search ) {\n\t\t\t\tSession.set('searching', true);\n\t\t\t\tSession.set('filter', search);\n\t\t\t} else {\n\t\t\t\tSession.set('searching', false);\n\t\t\t\tSession.set('filter', '');\n\t\t\t}\n\n\t\t\tSession.set('viewingBlog', true);\n\t\t\tdocument.title = 'dkoo dot net â†’ blog';\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\nblog.route('/:slug', {\n\t// preload subscription\n\tsubscriptions: function(params, queryParams) {\n\t\tif ( params.slug === 'new' ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.register('post', Meteor.subscribe('posts', { slug: params.slug }, {}, ''));\n\t\t}\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tif ( FlowRouter.getParam('slug') === 'new' ) {\n\t\t\t\tSession.set('editing', true);\n\t\t\t}\n\t\t\treset();\n\t\t\tSession.set('viewingBlog', true);\n\t\t\tSession.set('singlePost', true);\n\t\t\t\n\t\t\tvar post = Posts.findOne({ slug: FlowRouter.getParam('slug') });\n\t\t\t\n\t\t\tif ( post ) {\n\t\t\t\tdocument.title = 'dkoo dot net â†’ ' + post.title;\n\t\t\t}\n\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\n// project routes\nvar projects = FlowRouter.group({\n\tprefix: '/projects',\n\tname: 'projects'\n});\n\nprojects.route('/', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tdocument.title = 'dkoo dot net â†’ projects';\n\t\t}\n\t}\n});\n\nprojects.route('/:project', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tSession.set('viewingProject', true);\n\t\t}\n\t}\n});\n\n// about route\nFlowRouter.route('/about', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tSession.set('viewingProject', true);\n\t\t\tSession.set('project', 'about');\n\t\t}\n\t}\n});\n}).call(this);\n","servePath":"/lib/routes.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/routes.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/lib/routes.js","sourcesContent":["// reusable function to reset application states\nfunction reset() {\n\tSession.set('viewingBlog', false);\n\tSession.set('editing', false);\n\tSession.set('viewingProject', undefined);\n\tSession.set('editingProject', undefined);\n\tSession.set('singlePost', false);\n\tSession.set('modal', undefined);\n}\n\nFlowRouter.notFound = {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tFlowRouter.go('/');\n\t\t}\n\t}\n};\n\n// root\nFlowRouter.route('/', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tdocument.title = 'dkoo dot net';\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\n// login route\nvar accounts = FlowRouter.group({\n\tname: 'accounts'\n});\n\naccounts.route('/admin', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tif ( !!Meteor.user() ) {\n\t\t\t\tFlowRouter.go('/');\n\t\t\t} else {\n\t\t\t\treset();\n\t\t\t\tdocument.title = 'Log In';\n\t\t\t\tBlazeLayout.render('main', {content: 'admin'});\n\t\t\t}\n\t\t}\n\t}\n});\n\n// blog routes\nvar blog = FlowRouter.group({\n\tprefix: '/blog',\n\tname: 'blog'\n});\n\nblog.route('/', {\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tvar search = FlowRouter.getQueryParam('search');\n\n\t\t\tif ( search ) {\n\t\t\t\tSession.set('searching', true);\n\t\t\t\tSession.set('filter', search);\n\t\t\t} else {\n\t\t\t\tSession.set('searching', false);\n\t\t\t\tSession.set('filter', '');\n\t\t\t}\n\n\t\t\tSession.set('viewingBlog', true);\n\t\t\tdocument.title = 'dkoo dot net â†’ blog';\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\nblog.route('/:slug', {\n\t// preload subscription\n\tsubscriptions: function(params, queryParams) {\n\t\tif ( params.slug === 'new' ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.register('post', Meteor.subscribe('posts', { slug: params.slug }, {}, ''));\n\t\t}\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\tif ( FlowRouter.getParam('slug') === 'new' ) {\n\t\t\t\tSession.set('editing', true);\n\t\t\t}\n\t\t\treset();\n\t\t\tSession.set('viewingBlog', true);\n\t\t\tSession.set('singlePost', true);\n\t\t\t\n\t\t\tvar post = Posts.findOne({ slug: FlowRouter.getParam('slug') });\n\t\t\t\n\t\t\tif ( post ) {\n\t\t\t\tdocument.title = 'dkoo dot net â†’ ' + post.title;\n\t\t\t}\n\n\t\t\tBlazeLayout.render('main', {content: 'home'});\n\t\t}\n\t}\n});\n\n// project routes\nvar projects = FlowRouter.group({\n\tprefix: '/projects',\n\tname: 'projects'\n});\n\nprojects.route('/', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tdocument.title = 'dkoo dot net â†’ projects';\n\t\t}\n\t}\n});\n\nprojects.route('/:project', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tSession.set('viewingProject', true);\n\t\t}\n\t}\n});\n\n// about route\nFlowRouter.route('/about', {\n\tsubscriptions: function(params, queryParams) {\n\t\tthis.register('projects', Meteor.subscribe('projects'));\n\t},\n\taction: function() {\n\t\tif ( Meteor.isClient ) {\n\t\t\treset();\n\t\t\tBlazeLayout.render('main', {content: 'projects'});\n\t\t\tSession.set('viewingProject', true);\n\t\t\tSession.set('project', 'about');\n\t\t}\n\t}\n});"]}},{"type":"js","data":"(function(){Meteor.utils = {\n\t// append messages for admin screens\n\tappendMessages: function(parent, HTML) {\n\t\tvar messages = document.getElementById('messages') || document.createElement('div');\n\t\tmessages.setAttribute('id', 'messages');\n\t\tmessages.innerHTML = HTML;\n\t\tparent.appendChild(messages);\n\t},\n\tprettifyDate: function(dateString) {\n\t\tvar days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n\n\t\t// Create an array with the current month, day and time\n\t\tvar date = [ dateString.getMonth() + 1, dateString.getDate(), dateString.getFullYear() ];\n\n\t\t// Create an array with the current hour, minute and second\n\t\tvar time = [ dateString.getHours(), dateString.getMinutes() ];\n\n\t\t// Determine AM or PM suffix based on the hour\n\t\tvar suffix = ( time[0] < 12 ) ? 'AM' : 'PM';\n\n\t\t// Convert hour from military time\n\t\ttime[0] = ( time[0] < 12 ) ? time[0] : time[0] - 12;\n\n\t\t// If hour is 0, set it to 12\n\t\ttime[0] = time[0] || 12;\n\n\t\t// If seconds and minutes are less than 10, add a zero\n\t\tfor ( var i = 1; i < 3; i++ ) {\n\t\t\tif ( time[i] < 10 ) {\n\t\t\t\ttime[i] = '0' + time[i];\n\t\t\t}\n\t\t}\n\n\t\treturn [days[dateString.getDay()], date.join('/'), time.join(':') + ' ' + suffix];\n\t},\n\tgetUTC: function(prettifiedDate, prettifiedTime) {\n\t\tvar date = prettifiedDate.split('/'),\n\t\t\ttimeStr = prettifiedTime.toLowerCase() || '12:00 am',\n\t\t\ttime = timeStr.match(/(\\d+)(?::(\\d\\d))?\\s*(p?)/i),\n\t\t\tnewDate;\n\n\t\t// attempt to parse the date and time strings. expected formats:\n\t\t// date: MM/DD/YYYY\n\t\t// time: 9am, 9:00AM, 9:00 am will all work\n\t\t// if date is not given, return false\n\t\t// if time is not given, set it to midnight\n\t\tif ( date.length === 3 && time ) {\n\t\t\tvar hour = parseInt(time[1], 10) || 12,\n\t\t\t\tminute = parseInt(time[2]) || 0;\n\n\t\t\tif ( hour == 12 && !time[3] ) {\n\t\t\t\thour = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\thour += (hour < 12 && time[3]) ? 12 : 0;\n\t\t\t}\n\n\t\t\tnewDate = new Date(parseInt(date[2]), parseInt(date[0]) - 1, parseInt(date[1]), hour, minute);\n\t\t\treturn newDate.getTime();\n\t\t} else {\n\t\t\t// if we can't parse the date and time, return false\n\t\t\treturn false;\n\t\t}\n\t},\n\tmakeSlug: function(title) {\n\t\tvar arr = title.split(' '),\n\t\t\tslug = [],\n\t\t\tnewSlug,\n\t\t\texisting;\n\n\t\tfor ( var i = 0, len = arr.length; i !== len; i++ ) {\n\t\t\tif ( arr[i] ) {\n\t\t\t\t// remove punctuation, make all words lowercase, join with hyphens\n\t\t\t\tslug.push(arr[i].replace(/[^\\w\\s-]|_/g, '').replace(/\\s+/g, ' ').toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\tnewSlug = slug.join('-').replace('--', '-');\n\n\t\texisting = Posts.find( { slug: newSlug } );\n\n\t\t// if there's already one or more posts with this slug, increment the slug\n\t\tif ( existing.count() ) {\n\t\t\tnewSlug += '-' + ( existing.count() + 1 );\n\t\t}\n\n\t\treturn newSlug;\n\t},\n\texcerpt: function(post) {\n\t\tif ( post.excerpt ) {\n\t\t\treturn post.excerpt;\n\t\t} else {\n\t\t\tvar array = post.content.split(' '),\n\t\t\t\texcerpt = array.slice(0, 25).join(' ') + '&#160;&#8230;';\n\n\t\t\treturn array.length >= 25 ? excerpt : post.content;\n\t\t}\n\t},\n\tsmartenQuotes: function(text) {\n\t\treturn text\n\t\t\t.replace(/'''/g, '\\u2034')\t\t\t\t\t\t\t\t\t\t\t\t\t// triple prime\n\t\t\t.replace(/(\\W|^)\"(\\S)/g, '$1\\u201c$2')\t\t\t\t\t\t\t\t\t\t// beginning \"\n\t\t\t.replace(/(\\u201c[^\"]*)\"([^\"]*$|[^\\u201c\"]*\\u201c)/g, '$1\\u201d$2')\t\t\t// ending \"\n\t\t\t.replace(/([^0-9])\"/g,'$1\\u201d')\t\t\t\t\t\t\t\t\t\t\t// remaining \" at end of word\n\t\t\t.replace(/''/g, '\\u2033')\t\t\t\t\t\t\t\t\t\t\t\t\t// double prime\n\t\t\t.replace(/(\\W|^)'(\\S)/g, '$1\\u2018$2')\t\t\t\t\t\t\t\t\t\t// beginning '\n\t\t\t.replace(/([a-z])'([a-z])/ig, '$1\\u2019$2')\t\t\t\t\t\t\t\t\t// conjunction's possession\n\t\t\t.replace(/((\\u2018[^']*)|[a-z])'([^0-9]|$)/ig, '$1\\u2019$3')\t\t\t\t// ending '\n\t\t\t.replace(/(\\u2018)([0-9]{2}[^\\u2019]*)(\\u2018([^0-9]|$)|$|\\u2019[a-z])/ig, '\\u2019$2$3')\t// abbrev. years like '93\n\t\t\t.replace(/(\\B|^)\\u2018(?=([^\\u2019]*\\u2019\\b)*([^\\u2019\\u2018]*\\W[\\u2019\\u2018]\\b|[^\\u2019\\u2018]*$))/ig, '$1\\u2019')\t// backwards apostrophe\n\t\t\t.replace(/'/g, '\\u2032');\n\t}\n}\n}).call(this);\n","servePath":"/lib/utils.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/utils.js"],"names":[],"mappings":"yfile":"/lib/utils.js","sourcesContent":["Meteor.utils = {\n\t// append messages for admin screens\n\tappendMessages: function(parent, HTML) {\n\t\tvar messages = document.getElementById('messages') || document.createElement('div');\n\t\tmessages.setAttribute('id', 'messages');\n\t\tmessages.innerHTML = HTML;\n\t\tparent.appendChild(messages);\n\t},\n\tprettifyDate: function(dateString) {\n\t\tvar days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n\n\t\t// Create an array with the current month, day and time\n\t\tvar date = [ dateString.getMonth() + 1, dateString.getDate(), dateString.getFullYear() ];\n\n\t\t// Create an array with the current hour, minute and second\n\t\tvar time = [ dateString.getHours(), dateString.getMinutes() ];\n\n\t\t// Determine AM or PM suffix based on the hour\n\t\tvar suffix = ( time[0] < 12 ) ? 'AM' : 'PM';\n\n\t\t// Convert hour from military time\n\t\ttime[0] = ( time[0] < 12 ) ? time[0] : time[0] - 12;\n\n\t\t// If hour is 0, set it to 12\n\t\ttime[0] = time[0] || 12;\n\n\t\t// If seconds and minutes are less than 10, add a zero\n\t\tfor ( var i = 1; i < 3; i++ ) {\n\t\t\tif ( time[i] < 10 ) {\n\t\t\t\ttime[i] = '0' + time[i];\n\t\t\t}\n\t\t}\n\n\t\treturn [days[dateString.getDay()], date.join('/'), time.join(':') + ' ' + suffix];\n\t},\n\tgetUTC: function(prettifiedDate, prettifiedTime) {\n\t\tvar date = prettifiedDate.split('/'),\n\t\t\ttimeStr = prettifiedTime.toLowerCase() || '12:00 am',\n\t\t\ttime = timeStr.match(/(\\d+)(?::(\\d\\d))?\\s*(p?)/i),\n\t\t\tnewDate;\n\n\t\t// attempt to parse the date and time strings. expected formats:\n\t\t// date: MM/DD/YYYY\n\t\t// time: 9am, 9:00AM, 9:00 am will all work\n\t\t// if date is not given, return false\n\t\t// if time is not given, set it to midnight\n\t\tif ( date.length === 3 && time ) {\n\t\t\tvar hour = parseInt(time[1], 10) || 12,\n\t\t\t\tminute = parseInt(time[2]) || 0;\n\n\t\t\tif ( hour == 12 && !time[3] ) {\n\t\t\t\thour = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\thour += (hour < 12 && time[3]) ? 12 : 0;\n\t\t\t}\n\n\t\t\tnewDate = new Date(parseInt(date[2]), parseInt(date[0]) - 1, parseInt(date[1]), hour, minute);\n\t\t\treturn newDate.getTime();\n\t\t} else {\n\t\t\t// if we can't parse the date and time, return false\n\t\t\treturn false;\n\t\t}\n\t},\n\tmakeSlug: function(title) {\n\t\tvar arr = title.split(' '),\n\t\t\tslug = [],\n\t\t\tnewSlug,\n\t\t\texisting;\n\n\t\tfor ( var i = 0, len = arr.length; i !== len; i++ ) {\n\t\t\tif ( arr[i] ) {\n\t\t\t\t// remove punctuation, make all words lowercase, join with hyphens\n\t\t\t\tslug.push(arr[i].replace(/[^\\w\\s-]|_/g, '').replace(/\\s+/g, ' ').toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\tnewSlug = slug.join('-').replace('--', '-');\n\n\t\texisting = Posts.find( { slug: newSlug } );\n\n\t\t// if there's already one or more posts with this slug, increment the slug\n\t\tif ( existing.count() ) {\n\t\t\tnewSlug += '-' + ( existing.count() + 1 );\n\t\t}\n\n\t\treturn newSlug;\n\t},\n\texcerpt: function(post) {\n\t\tif ( post.excerpt ) {\n\t\t\treturn post.excerpt;\n\t\t} else {\n\t\t\tvar array = post.content.split(' '),\n\t\t\t\texcerpt = array.slice(0, 25).join(' ') + '&#160;&#8230;';\n\n\t\t\treturn array.length >= 25 ? excerpt : post.content;\n\t\t}\n\t},\n\tsmartenQuotes: function(text) {\n\t\treturn text\n\t\t\t.replace(/'''/g, '\\u2034')\t\t\t\t\t\t\t\t\t\t\t\t\t// triple prime\n\t\t\t.replace(/(\\W|^)\"(\\S)/g, '$1\\u201c$2')\t\t\t\t\t\t\t\t\t\t// beginning \"\n\t\t\t.replace(/(\\u201c[^\"]*)\"([^\"]*$|[^\\u201c\"]*\\u201c)/g, '$1\\u201d$2')\t\t\t// ending \"\n\t\t\t.replace(/([^0-9])\"/g,'$1\\u201d')\t\t\t\t\t\t\t\t\t\t\t// remaining \" at end of word\n\t\t\t.replace(/''/g, '\\u2033')\t\t\t\t\t\t\t\t\t\t\t\t\t// double prime\n\t\t\t.replace(/(\\W|^)'(\\S)/g, '$1\\u2018$2')\t\t\t\t\t\t\t\t\t\t// beginning '\n\t\t\t.replace(/([a-z])'([a-z])/ig, '$1\\u2019$2')\t\t\t\t\t\t\t\t\t// conjunction's possession\n\t\t\t.replace(/((\\u2018[^']*)|[a-z])'([^0-9]|$)/ig, '$1\\u2019$3')\t\t\t\t// ending '\n\t\t\t.replace(/(\\u2018)([0-9]{2}[^\\u2019]*)(\\u2018([^0-9]|$)|$|\\u2019[a-z])/ig, '\\u2019$2$3')\t// abbrev. years like '93\n\t\t\t.replace(/(\\B|^)\\u2018(?=([^\\u2019]*\\u2019\\b)*([^\\u2019\\u2018]*\\W[\\u2019\\u2018]\\b|[^\\u2019\\u2018]*$))/ig, '$1\\u2019')\t// backwards apostrophe\n\t\t\t.replace(/'/g, '\\u2032');\n\t}\n}"]}},{"type":"js","data":"(function(){sitemaps.add('/sitemap.xml', function() {\n\treturn [{\n\t\tpage: '/',\n\t\tchangefreq: 'weekly'\n\t}, {\n\t\tpage: '/blog',\n\t\tchangefreq: 'daily'\n\t}];\n});\n}).call(this);\n","servePath":"/server/admin/sitemap.js","sourceMap":{"version":3,"sources":["/server/admin/sitemap.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/server/admin/sitemap.js","sourcesContent":["sitemaps.add('/sitemap.xml', function() {\n\treturn [{\n\t\tpage: '/',\n\t\tchangefreq: 'weekly'\n\t}, {\n\t\tpage: '/blog',\n\t\tchangefreq: 'daily'\n\t}];\n});"]}},{"type":"js","data":"(function(){Meteor.dkoo = {\n\tcheckUser: function(userId) {\n\t\tvar dkoo = Meteor.users.findOne( { username: 'dkoo' } );\n\n\t\tif ( dkoo._id === userId ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n};\n\nMeteor.users.deny({\n\tupdate: function() {\n\t\treturn true;\n\t}\n});\n}).call(this);\n","servePath":"/server/admin/user.js","sourceMap":{"version":3,"sources":["/server/admin/user.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/server/admin/user.js","sourcesContent":["Meteor.dkoo = {\n\tcheckUser: function(userId) {\n\t\tvar dkoo = Meteor.users.findOne( { username: 'dkoo' } );\n\n\t\tif ( dkoo._id === userId ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n};\n\nMeteor.users.deny({\n\tupdate: function() {\n\t\treturn true;\n\t}\n});"]}},{"type":"js","data":"(function(){Meteor.methods({\n\teditPost: function(postId, input) {\n\t\tcheck(postId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\ttags: Match.Optional(Array),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\texcerpt: Match.Optional(String),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( postId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('post'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\n\t\t\t\treturn Posts.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Posts.findOne( { _id: postId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Posts.update(postId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [],\n\t\t\t\tnewTags;\n\n\t\t\ttags.push(tag.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [];\n\n\t\t\tfor ( var i = 0, len = tags.length; i !== len; i++ ) {\n\t\t\t\tif ( tags[i] === tag ) {\n\t\t\t\t\ttags.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeletePost: function(postId) {\n\t\tcheck(postId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tPosts.remove(postId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});\n}).call(this);\n","servePath":"/server/blog/blog.js","sourceMap":{"version":3,"sources":["/server/blog/blog.js"],"names":[],"mappings":"yfile":"/server/blog/blog.js","sourcesContent":["Meteor.methods({\n\teditPost: function(postId, input) {\n\t\tcheck(postId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\ttags: Match.Optional(Array),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\texcerpt: Match.Optional(String),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( postId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('post'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\n\t\t\t\treturn Posts.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Posts.findOne( { _id: postId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Posts.update(postId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [],\n\t\t\t\tnewTags;\n\n\t\t\ttags.push(tag.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [];\n\n\t\t\tfor ( var i = 0, len = tags.length; i !== len; i++ ) {\n\t\t\t\tif ( tags[i] === tag ) {\n\t\t\t\t\ttags.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeletePost: function(postId) {\n\t\tcheck(postId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tPosts.remove(postId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});"]}},{"type":"js","data":"(function(){Meteor.methods({\n\tloading: function() {\n\t\treturn Session.get('loading');\n\t},\n\teditProject: function(projectId, input) {\n\t\tcheck(projectId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\timages: Match.Optional(Array),\n\t\t\tthumb: Match.Optional(String),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( projectId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('project'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\t\t\t\treturn Projects.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Projects.findOne( { _id: projectId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Projects.update(projectId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddImage: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [],\n\t\t\t\tnewTags;\n\n\t\t\timages.push(image.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveImg: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [];\n\n\t\t\tfor ( var i = 0, len = images.length; i !== len; i++ ) {\n\t\t\t\tif ( images[i] === image ) {\n\t\t\t\t\timages.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeleteProject: function(projectId) {\n\t\tcheck(projectId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tProjects.remove(projectId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});\n}).call(this);\n","servePath":"/server/projects/projects.js","sourceMap":{"version":3,"sources":["/server/projects/projects.js"],"names":[],"mappings":"yfile":"/server/projects/projects.js","sourcesContent":["Meteor.methods({\n\tloading: function() {\n\t\treturn Session.get('loading');\n\t},\n\teditProject: function(projectId, input) {\n\t\tcheck(projectId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\timages: Match.Optional(Array),\n\t\t\tthumb: Match.Optional(String),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( projectId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('project'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\t\t\t\treturn Projects.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Projects.findOne( { _id: projectId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Projects.update(projectId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddImage: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [],\n\t\t\t\tnewTags;\n\n\t\t\timages.push(image.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveImg: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [];\n\n\t\t\tfor ( var i = 0, len = images.length; i !== len; i++ ) {\n\t\t\t\tif ( images[i] === image ) {\n\t\t\t\t\timages.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeleteProject: function(projectId) {\n\t\tcheck(projectId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tProjects.remove(projectId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});"]}},{"type":"js","data":"(function(){// update current time every minute\nMeteor.startup(function() {\n\tMeteor.setInterval(function() {\n\t\tMeteor.now = Date.now();\n\t}, 60000);\n});\n\nMeteor.publish('posts', function (filter, options, search) {\n\tcheck(filter, Object);\n\tcheck(options, Object);\n\tcheck(search, String);\n\n\tif ( options.limit ) {\n\t\tif ( options.limit > Posts.find().count ) {\n\t\t\toptions.limit = 0;\n\t\t}\n\t}\n\n\t// double-check user status before publishing private documents\n\tif ( !Meteor.dkoo.checkUser(this.userId) ) {\n\t\tif ( !filter.status ) { \n\t\t\tfilter.status = 'public';\n\t\t}\n\n\t\tif ( !filter.published ) { \n\t\t\tfilter.published = { $lte: Meteor.now };\n\t\t}\n\t}\n\n\tif ( search ) {\n\t\t// simple sanitization to strip any tag-like strings\n\t\tsearch = search.replace(/<(?:.|\\n)*?>/gm, '');\n\n\t\tfilter['$or'] = [\n\t\t\t{ title: { $regex: new RegExp('(?=.*' + search + ').*', 'i') } },\n\t\t\t{ content: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ excerpt: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ tags: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ published: { $gte: Date.parse(search), $lte: Date.parse(search) + 86400000 } } // date queries should find all posts within a 24-hour period\n\t\t];\n\t}\n\n\treturn Posts.find( filter, options );\n});\n\nMeteor.publish('projects', function () {\n\tvar filter = {};\n\n\t// double-check user status before publishing private documents\n\tif ( !Meteor.dkoo.checkUser(this.userId) ) {\n\t\tfilter.status = 'public';\n\t}\n\n\treturn Projects.find( filter );\n});\n}).call(this);\n","servePath":"/server/main.js","sourceMap":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/server/main.js","sourcesContent":["// update current time every minute\nMeteor.startup(function() {\n\tMeteor.setInterval(function() {\n\t\tMeteor.now = Date.now();\n\t}, 60000);\n});\n\nMeteor.publish('posts', function (filter, options, search) {\n\tcheck(filter, Object);\n\tcheck(options, Object);\n\tcheck(search, String);\n\n\tif ( options.limit ) {\n\t\tif ( options.limit > Posts.find().count ) {\n\t\t\toptions.limit = 0;\n\t\t}\n\t}\n\n\t// double-check user status before publishing private documents\n\tif ( !Meteor.dkoo.checkUser(this.userId) ) {\n\t\tif ( !filter.status ) { \n\t\t\tfilter.status = 'public';\n\t\t}\n\n\t\tif ( !filter.published ) { \n\t\t\tfilter.published = { $lte: Meteor.now };\n\t\t}\n\t}\n\n\tif ( search ) {\n\t\t// simple sanitization to strip any tag-like strings\n\t\tsearch = search.replace(/<(?:.|\\n)*?>/gm, '');\n\n\t\tfilter['$or'] = [\n\t\t\t{ title: { $regex: new RegExp('(?=.*' + search + ').*', 'i') } },\n\t\t\t{ content: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ excerpt: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ tags: { $regex: new RegExp('(?=.*' + search + ').*' + '.*', 'i') } },\n\t\t\t{ published: { $gte: Date.parse(search), $lte: Date.parse(search) + 86400000 } } // date queries should find all posts within a 24-hour period\n\t\t];\n\t}\n\n\treturn Posts.find( filter, options );\n});\n\nMeteor.publish('projects', function () {\n\tvar filter = {};\n\n\t// double-check user status before publishing private documents\n\tif ( !Meteor.dkoo.checkUser(this.userId) ) {\n\t\tfilter.status = 'public';\n\t}\n\n\treturn Projects.find( filter );\n});"]}}]