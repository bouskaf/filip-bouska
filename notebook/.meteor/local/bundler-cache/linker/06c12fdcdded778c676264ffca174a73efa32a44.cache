[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar exports, module, marked;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/chuangbo_marked/packages/chuangbo_marked.js                                         //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n(function () {                                                                                  // 1\n                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////      // 3\n//                                                                                      //      // 4\n// packages/chuangbo:marked/pre-marked.js                                               //      // 5\n//                                                                                      //      // 6\n//////////////////////////////////////////////////////////////////////////////////////////      // 7\n                                                                                        //      // 8\nexports = {};                                                                           // 1    // 9\nmodule = {};                                                                            // 2    // 10\n//////////////////////////////////////////////////////////////////////////////////////////      // 11\n                                                                                                // 12\n}).call(this);                                                                                  // 13\n                                                                                                // 14\n                                                                                                // 15\n                                                                                                // 16\n                                                                                                // 17\n                                                                                                // 18\n                                                                                                // 19\n(function () {                                                                                  // 20\n                                                                                                // 21\n//////////////////////////////////////////////////////////////////////////////////////////      // 22\n//                                                                                      //      // 23\n// packages/chuangbo:marked/marked/lib/marked.js                                        //      // 24\n//                                                                                      //      // 25\n//////////////////////////////////////////////////////////////////////////////////////////      // 26\n                                                                                        //      // 27\n/**                                                                                     // 1    // 28\n * marked - a markdown parser                                                           // 2    // 29\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)                         // 3    // 30\n * https://github.com/chjj/marked                                                       // 4    // 31\n */                                                                                     // 5    // 32\n                                                                                        // 6    // 33\n;(function() {                                                                          // 7    // 34\n                                                                                        // 8    // 35\n/**                                                                                     // 9    // 36\n * Block-Level Grammar                                                                  // 10   // 37\n */                                                                                     // 11   // 38\n                                                                                        // 12   // 39\nvar block = {                                                                           // 13   // 40\n  newline: /^\\n+/,                                                                      // 14   // 41\n  code: /^( {4}[^\\n]+\\n*)+/,                                                            // 15   // 42\n  fences: noop,                                                                         // 16   // 43\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,                                                      // 17   // 44\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,                                     // 18   // 45\n  nptable: noop,                                                                        // 19   // 46\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,                                        // 20   // 47\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,                                     // 21   // 48\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,                // 22   // 49\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/, // 23   // 50\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,             // 24   // 51\n  table: noop,                                                                          // 25   // 52\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,          // 26   // 53\n  text: /^[^\\n]+/                                                                       // 27   // 54\n};                                                                                      // 28   // 55\n                                                                                        // 29   // 56\nblock.bullet = /(?:[*+-]|\\d+\\.)/;                                                       // 30   // 57\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;                              // 31   // 58\nblock.item = replace(block.item, 'gm')                                                  // 32   // 59\n  (/bull/g, block.bullet)                                                               // 33   // 60\n  ();                                                                                   // 34   // 61\n                                                                                        // 35   // 62\nblock.list = replace(block.list)                                                        // 36   // 63\n  (/bull/g, block.bullet)                                                               // 37   // 64\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')                                       // 38   // 65\n  ('def', '\\\\n+(?=' + block.def.source + ')')                                           // 39   // 66\n  ();                                                                                   // 40   // 67\n                                                                                        // 41   // 68\nblock.blockquote = replace(block.blockquote)                                            // 42   // 69\n  ('def', block.def)                                                                    // 43   // 70\n  ();                                                                                   // 44   // 71\n                                                                                        // 45   // 72\nblock._tag = '(?!(?:'                                                                   // 46   // 73\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'                                // 47   // 74\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'                               // 48   // 75\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';                          // 49   // 76\n                                                                                        // 50   // 77\nblock.html = replace(block.html)                                                        // 51   // 78\n  ('comment', /<!--[\\s\\S]*?-->/)                                                        // 52   // 79\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)                                                    // 53   // 80\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)                                      // 54   // 81\n  (/tag/g, block._tag)                                                                  // 55   // 82\n  ();                                                                                   // 56   // 83\n                                                                                        // 57   // 84\nblock.paragraph = replace(block.paragraph)                                              // 58   // 85\n  ('hr', block.hr)                                                                      // 59   // 86\n  ('heading', block.heading)                                                            // 60   // 87\n  ('lheading', block.lheading)                                                          // 61   // 88\n  ('blockquote', block.blockquote)                                                      // 62   // 89\n  ('tag', '<' + block._tag)                                                             // 63   // 90\n  ('def', block.def)                                                                    // 64   // 91\n  ();                                                                                   // 65   // 92\n                                                                                        // 66   // 93\n/**                                                                                     // 67   // 94\n * Normal Block Grammar                                                                 // 68   // 95\n */                                                                                     // 69   // 96\n                                                                                        // 70   // 97\nblock.normal = merge({}, block);                                                        // 71   // 98\n                                                                                        // 72   // 99\n/**                                                                                     // 73   // 100\n * GFM Block Grammar                                                                    // 74   // 101\n */                                                                                     // 75   // 102\n                                                                                        // 76   // 103\nblock.gfm = merge({}, block.normal, {                                                   // 77   // 104\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,                 // 78   // 105\n  paragraph: /^/,                                                                       // 79   // 106\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/                                      // 80   // 107\n});                                                                                     // 81   // 108\n                                                                                        // 82   // 109\nblock.gfm.paragraph = replace(block.paragraph)                                          // 83   // 110\n  ('(?!', '(?!'                                                                         // 84   // 111\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'                               // 85   // 112\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')                                    // 86   // 113\n  ();                                                                                   // 87   // 114\n                                                                                        // 88   // 115\n/**                                                                                     // 89   // 116\n * GFM + Tables Block Grammar                                                           // 90   // 117\n */                                                                                     // 91   // 118\n                                                                                        // 92   // 119\nblock.tables = merge({}, block.gfm, {                                                   // 93   // 120\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,             // 94   // 121\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/                    // 95   // 122\n});                                                                                     // 96   // 123\n                                                                                        // 97   // 124\n/**                                                                                     // 98   // 125\n * Block Lexer                                                                          // 99   // 126\n */                                                                                     // 100  // 127\n                                                                                        // 101  // 128\nfunction Lexer(options) {                                                               // 102  // 129\n  this.tokens = [];                                                                     // 103  // 130\n  this.tokens.links = {};                                                               // 104  // 131\n  this.options = options || marked.defaults;                                            // 105  // 132\n  this.rules = block.normal;                                                            // 106  // 133\n                                                                                        // 107  // 134\n  if (this.options.gfm) {                                                               // 108  // 135\n    if (this.options.tables) {                                                          // 109  // 136\n      this.rules = block.tables;                                                        // 110  // 137\n    } else {                                                                            // 111  // 138\n      this.rules = block.gfm;                                                           // 112  // 139\n    }                                                                                   // 113  // 140\n  }                                                                                     // 114  // 141\n}                                                                                       // 115  // 142\n                                                                                        // 116  // 143\n/**                                                                                     // 117  // 144\n * Expose Block Rules                                                                   // 118  // 145\n */                                                                                     // 119  // 146\n                                                                                        // 120  // 147\nLexer.rules = block;                                                                    // 121  // 148\n                                                                                        // 122  // 149\n/**                                                                                     // 123  // 150\n * Static Lex Method                                                                    // 124  // 151\n */                                                                                     // 125  // 152\n                                                                                        // 126  // 153\nLexer.lex = function(src, options) {                                                    // 127  // 154\n  var lexer = new Lexer(options);                                                       // 128  // 155\n  return lexer.lex(src);                                                                // 129  // 156\n};                                                                                      // 130  // 157\n                                                                                        // 131  // 158\n/**                                                                                     // 132  // 159\n * Preprocessing                                                                        // 133  // 160\n */                                                                                     // 134  // 161\n                                                                                        // 135  // 162\nLexer.prototype.lex = function(src) {                                                   // 136  // 163\n  src = src                                                                             // 137  // 164\n    .replace(/\\r\\n|\\r/g, '\\n')                                                          // 138  // 165\n    .replace(/\\t/g, '    ')                                                             // 139  // 166\n    .replace(/\\u00a0/g, ' ')                                                            // 140  // 167\n    .replace(/\\u2424/g, '\\n');                                                          // 141  // 168\n                                                                                        // 142  // 169\n  return this.token(src, true);                                                         // 143  // 170\n};                                                                                      // 144  // 171\n                                                                                        // 145  // 172\n/**                                                                                     // 146  // 173\n * Lexing                                                                               // 147  // 174\n */                                                                                     // 148  // 175\n                                                                                        // 149  // 176\nLexer.prototype.token = function(src, top, bq) {                                        // 150  // 177\n  var src = src.replace(/^ +$/gm, '')                                                   // 151  // 178\n    , next                                                                              // 152  // 179\n    , loose                                                                             // 153  // 180\n    , cap                                                                               // 154  // 181\n    , bull                                                                              // 155  // 182\n    , b                                                                                 // 156  // 183\n    , item                                                                              // 157  // 184\n    , space                                                                             // 158  // 185\n    , i                                                                                 // 159  // 186\n    , l;                                                                                // 160  // 187\n                                                                                        // 161  // 188\n  while (src) {                                                                         // 162  // 189\n    // newline                                                                          // 163  // 190\n    if (cap = this.rules.newline.exec(src)) {                                           // 164  // 191\n      src = src.substring(cap[0].length);                                               // 165  // 192\n      if (cap[0].length > 1) {                                                          // 166  // 193\n        this.tokens.push({                                                              // 167  // 194\n          type: 'space'                                                                 // 168  // 195\n        });                                                                             // 169  // 196\n      }                                                                                 // 170  // 197\n    }                                                                                   // 171  // 198\n                                                                                        // 172  // 199\n    // code                                                                             // 173  // 200\n    if (cap = this.rules.code.exec(src)) {                                              // 174  // 201\n      src = src.substring(cap[0].length);                                               // 175  // 202\n      cap = cap[0].replace(/^ {4}/gm, '');                                              // 176  // 203\n      this.tokens.push({                                                                // 177  // 204\n        type: 'code',                                                                   // 178  // 205\n        text: !this.options.pedantic                                                    // 179  // 206\n          ? cap.replace(/\\n+$/, '')                                                     // 180  // 207\n          : cap                                                                         // 181  // 208\n      });                                                                               // 182  // 209\n      continue;                                                                         // 183  // 210\n    }                                                                                   // 184  // 211\n                                                                                        // 185  // 212\n    // fences (gfm)                                                                     // 186  // 213\n    if (cap = this.rules.fences.exec(src)) {                                            // 187  // 214\n      src = src.substring(cap[0].length);                                               // 188  // 215\n      this.tokens.push({                                                                // 189  // 216\n        type: 'code',                                                                   // 190  // 217\n        lang: cap[2],                                                                   // 191  // 218\n        text: cap[3] || ''                                                              // 192  // 219\n      });                                                                               // 193  // 220\n      continue;                                                                         // 194  // 221\n    }                                                                                   // 195  // 222\n                                                                                        // 196  // 223\n    // heading                                                                          // 197  // 224\n    if (cap = this.rules.heading.exec(src)) {                                           // 198  // 225\n      src = src.substring(cap[0].length);                                               // 199  // 226\n      this.tokens.push({                                                                // 200  // 227\n        type: 'heading',                                                                // 201  // 228\n        depth: cap[1].length,                                                           // 202  // 229\n        text: cap[2]                                                                    // 203  // 230\n      });                                                                               // 204  // 231\n      continue;                                                                         // 205  // 232\n    }                                                                                   // 206  // 233\n                                                                                        // 207  // 234\n    // table no leading pipe (gfm)                                                      // 208  // 235\n    if (top && (cap = this.rules.nptable.exec(src))) {                                  // 209  // 236\n      src = src.substring(cap[0].length);                                               // 210  // 237\n                                                                                        // 211  // 238\n      item = {                                                                          // 212  // 239\n        type: 'table',                                                                  // 213  // 240\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 214  // 241\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 215  // 242\n        cells: cap[3].replace(/\\n$/, '').split('\\n')                                    // 216  // 243\n      };                                                                                // 217  // 244\n                                                                                        // 218  // 245\n      for (i = 0; i < item.align.length; i++) {                                         // 219  // 246\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 220  // 247\n          item.align[i] = 'right';                                                      // 221  // 248\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 222  // 249\n          item.align[i] = 'center';                                                     // 223  // 250\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 224  // 251\n          item.align[i] = 'left';                                                       // 225  // 252\n        } else {                                                                        // 226  // 253\n          item.align[i] = null;                                                         // 227  // 254\n        }                                                                               // 228  // 255\n      }                                                                                 // 229  // 256\n                                                                                        // 230  // 257\n      for (i = 0; i < item.cells.length; i++) {                                         // 231  // 258\n        item.cells[i] = item.cells[i].split(/ *\\| */);                                  // 232  // 259\n      }                                                                                 // 233  // 260\n                                                                                        // 234  // 261\n      this.tokens.push(item);                                                           // 235  // 262\n                                                                                        // 236  // 263\n      continue;                                                                         // 237  // 264\n    }                                                                                   // 238  // 265\n                                                                                        // 239  // 266\n    // lheading                                                                         // 240  // 267\n    if (cap = this.rules.lheading.exec(src)) {                                          // 241  // 268\n      src = src.substring(cap[0].length);                                               // 242  // 269\n      this.tokens.push({                                                                // 243  // 270\n        type: 'heading',                                                                // 244  // 271\n        depth: cap[2] === '=' ? 1 : 2,                                                  // 245  // 272\n        text: cap[1]                                                                    // 246  // 273\n      });                                                                               // 247  // 274\n      continue;                                                                         // 248  // 275\n    }                                                                                   // 249  // 276\n                                                                                        // 250  // 277\n    // hr                                                                               // 251  // 278\n    if (cap = this.rules.hr.exec(src)) {                                                // 252  // 279\n      src = src.substring(cap[0].length);                                               // 253  // 280\n      this.tokens.push({                                                                // 254  // 281\n        type: 'hr'                                                                      // 255  // 282\n      });                                                                               // 256  // 283\n      continue;                                                                         // 257  // 284\n    }                                                                                   // 258  // 285\n                                                                                        // 259  // 286\n    // blockquote                                                                       // 260  // 287\n    if (cap = this.rules.blockquote.exec(src)) {                                        // 261  // 288\n      src = src.substring(cap[0].length);                                               // 262  // 289\n                                                                                        // 263  // 290\n      this.tokens.push({                                                                // 264  // 291\n        type: 'blockquote_start'                                                        // 265  // 292\n      });                                                                               // 266  // 293\n                                                                                        // 267  // 294\n      cap = cap[0].replace(/^ *> ?/gm, '');                                             // 268  // 295\n                                                                                        // 269  // 296\n      // Pass `top` to keep the current                                                 // 270  // 297\n      // \"toplevel\" state. This is exactly                                              // 271  // 298\n      // how markdown.pl works.                                                         // 272  // 299\n      this.token(cap, top, true);                                                       // 273  // 300\n                                                                                        // 274  // 301\n      this.tokens.push({                                                                // 275  // 302\n        type: 'blockquote_end'                                                          // 276  // 303\n      });                                                                               // 277  // 304\n                                                                                        // 278  // 305\n      continue;                                                                         // 279  // 306\n    }                                                                                   // 280  // 307\n                                                                                        // 281  // 308\n    // list                                                                             // 282  // 309\n    if (cap = this.rules.list.exec(src)) {                                              // 283  // 310\n      src = src.substring(cap[0].length);                                               // 284  // 311\n      bull = cap[2];                                                                    // 285  // 312\n                                                                                        // 286  // 313\n      this.tokens.push({                                                                // 287  // 314\n        type: 'list_start',                                                             // 288  // 315\n        ordered: bull.length > 1                                                        // 289  // 316\n      });                                                                               // 290  // 317\n                                                                                        // 291  // 318\n      // Get each top-level item.                                                       // 292  // 319\n      cap = cap[0].match(this.rules.item);                                              // 293  // 320\n                                                                                        // 294  // 321\n      next = false;                                                                     // 295  // 322\n      l = cap.length;                                                                   // 296  // 323\n      i = 0;                                                                            // 297  // 324\n                                                                                        // 298  // 325\n      for (; i < l; i++) {                                                              // 299  // 326\n        item = cap[i];                                                                  // 300  // 327\n                                                                                        // 301  // 328\n        // Remove the list item's bullet                                                // 302  // 329\n        // so it is seen as the next token.                                             // 303  // 330\n        space = item.length;                                                            // 304  // 331\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');                                  // 305  // 332\n                                                                                        // 306  // 333\n        // Outdent whatever the                                                         // 307  // 334\n        // list item contains. Hacky.                                                   // 308  // 335\n        if (~item.indexOf('\\n ')) {                                                     // 309  // 336\n          space -= item.length;                                                         // 310  // 337\n          item = !this.options.pedantic                                                 // 311  // 338\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')                 // 312  // 339\n            : item.replace(/^ {1,4}/gm, '');                                            // 313  // 340\n        }                                                                               // 314  // 341\n                                                                                        // 315  // 342\n        // Determine whether the next list item belongs here.                           // 316  // 343\n        // Backpedal if it does not belong in this list.                                // 317  // 344\n        if (this.options.smartLists && i !== l - 1) {                                   // 318  // 345\n          b = block.bullet.exec(cap[i + 1])[0];                                         // 319  // 346\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {                       // 320  // 347\n            src = cap.slice(i + 1).join('\\n') + src;                                    // 321  // 348\n            i = l - 1;                                                                  // 322  // 349\n          }                                                                             // 323  // 350\n        }                                                                               // 324  // 351\n                                                                                        // 325  // 352\n        // Determine whether item is loose or not.                                      // 326  // 353\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/                                         // 327  // 354\n        // for discount behavior.                                                       // 328  // 355\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);                                      // 329  // 356\n        if (i !== l - 1) {                                                              // 330  // 357\n          next = item.charAt(item.length - 1) === '\\n';                                 // 331  // 358\n          if (!loose) loose = next;                                                     // 332  // 359\n        }                                                                               // 333  // 360\n                                                                                        // 334  // 361\n        this.tokens.push({                                                              // 335  // 362\n          type: loose                                                                   // 336  // 363\n            ? 'loose_item_start'                                                        // 337  // 364\n            : 'list_item_start'                                                         // 338  // 365\n        });                                                                             // 339  // 366\n                                                                                        // 340  // 367\n        // Recurse.                                                                     // 341  // 368\n        this.token(item, false, bq);                                                    // 342  // 369\n                                                                                        // 343  // 370\n        this.tokens.push({                                                              // 344  // 371\n          type: 'list_item_end'                                                         // 345  // 372\n        });                                                                             // 346  // 373\n      }                                                                                 // 347  // 374\n                                                                                        // 348  // 375\n      this.tokens.push({                                                                // 349  // 376\n        type: 'list_end'                                                                // 350  // 377\n      });                                                                               // 351  // 378\n                                                                                        // 352  // 379\n      continue;                                                                         // 353  // 380\n    }                                                                                   // 354  // 381\n                                                                                        // 355  // 382\n    // html                                                                             // 356  // 383\n    if (cap = this.rules.html.exec(src)) {                                              // 357  // 384\n      src = src.substring(cap[0].length);                                               // 358  // 385\n      this.tokens.push({                                                                // 359  // 386\n        type: this.options.sanitize                                                     // 360  // 387\n          ? 'paragraph'                                                                 // 361  // 388\n          : 'html',                                                                     // 362  // 389\n        pre: !this.options.sanitizer                                                    // 363  // 390\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),           // 364  // 391\n        text: cap[0]                                                                    // 365  // 392\n      });                                                                               // 366  // 393\n      continue;                                                                         // 367  // 394\n    }                                                                                   // 368  // 395\n                                                                                        // 369  // 396\n    // def                                                                              // 370  // 397\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {                             // 371  // 398\n      src = src.substring(cap[0].length);                                               // 372  // 399\n      this.tokens.links[cap[1].toLowerCase()] = {                                       // 373  // 400\n        href: cap[2],                                                                   // 374  // 401\n        title: cap[3]                                                                   // 375  // 402\n      };                                                                                // 376  // 403\n      continue;                                                                         // 377  // 404\n    }                                                                                   // 378  // 405\n                                                                                        // 379  // 406\n    // table (gfm)                                                                      // 380  // 407\n    if (top && (cap = this.rules.table.exec(src))) {                                    // 381  // 408\n      src = src.substring(cap[0].length);                                               // 382  // 409\n                                                                                        // 383  // 410\n      item = {                                                                          // 384  // 411\n        type: 'table',                                                                  // 385  // 412\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 386  // 413\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 387  // 414\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')                         // 388  // 415\n      };                                                                                // 389  // 416\n                                                                                        // 390  // 417\n      for (i = 0; i < item.align.length; i++) {                                         // 391  // 418\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 392  // 419\n          item.align[i] = 'right';                                                      // 393  // 420\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 394  // 421\n          item.align[i] = 'center';                                                     // 395  // 422\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 396  // 423\n          item.align[i] = 'left';                                                       // 397  // 424\n        } else {                                                                        // 398  // 425\n          item.align[i] = null;                                                         // 399  // 426\n        }                                                                               // 400  // 427\n      }                                                                                 // 401  // 428\n                                                                                        // 402  // 429\n      for (i = 0; i < item.cells.length; i++) {                                         // 403  // 430\n        item.cells[i] = item.cells[i]                                                   // 404  // 431\n          .replace(/^ *\\| *| *\\| *$/g, '')                                              // 405  // 432\n          .split(/ *\\| */);                                                             // 406  // 433\n      }                                                                                 // 407  // 434\n                                                                                        // 408  // 435\n      this.tokens.push(item);                                                           // 409  // 436\n                                                                                        // 410  // 437\n      continue;                                                                         // 411  // 438\n    }                                                                                   // 412  // 439\n                                                                                        // 413  // 440\n    // top-level paragraph                                                              // 414  // 441\n    if (top && (cap = this.rules.paragraph.exec(src))) {                                // 415  // 442\n      src = src.substring(cap[0].length);                                               // 416  // 443\n      this.tokens.push({                                                                // 417  // 444\n        type: 'paragraph',                                                              // 418  // 445\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'                                 // 419  // 446\n          ? cap[1].slice(0, -1)                                                         // 420  // 447\n          : cap[1]                                                                      // 421  // 448\n      });                                                                               // 422  // 449\n      continue;                                                                         // 423  // 450\n    }                                                                                   // 424  // 451\n                                                                                        // 425  // 452\n    // text                                                                             // 426  // 453\n    if (cap = this.rules.text.exec(src)) {                                              // 427  // 454\n      // Top-level should never reach here.                                             // 428  // 455\n      src = src.substring(cap[0].length);                                               // 429  // 456\n      this.tokens.push({                                                                // 430  // 457\n        type: 'text',                                                                   // 431  // 458\n        text: cap[0]                                                                    // 432  // 459\n      });                                                                               // 433  // 460\n      continue;                                                                         // 434  // 461\n    }                                                                                   // 435  // 462\n                                                                                        // 436  // 463\n    if (src) {                                                                          // 437  // 464\n      throw new                                                                         // 438  // 465\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 439  // 466\n    }                                                                                   // 440  // 467\n  }                                                                                     // 441  // 468\n                                                                                        // 442  // 469\n  return this.tokens;                                                                   // 443  // 470\n};                                                                                      // 444  // 471\n                                                                                        // 445  // 472\n/**                                                                                     // 446  // 473\n * Inline-Level Grammar                                                                 // 447  // 474\n */                                                                                     // 448  // 475\n                                                                                        // 449  // 476\nvar inline = {                                                                          // 450  // 477\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,                                                // 451  // 478\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,                                                 // 452  // 479\n  url: noop,                                                                            // 453  // 480\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,                        // 454  // 481\n  link: /^!?\\[(inside)\\]\\(href\\)/,                                                      // 455  // 482\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,                                            // 456  // 483\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,                                           // 457  // 484\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,                             // 458  // 485\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,                          // 459  // 486\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,                                             // 460  // 487\n  br: /^ {2,}\\n(?!\\s*$)/,                                                               // 461  // 488\n  del: noop,                                                                            // 462  // 489\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/                                            // 463  // 490\n};                                                                                      // 464  // 491\n                                                                                        // 465  // 492\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;                              // 466  // 493\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;                        // 467  // 494\n                                                                                        // 468  // 495\ninline.link = replace(inline.link)                                                      // 469  // 496\n  ('inside', inline._inside)                                                            // 470  // 497\n  ('href', inline._href)                                                                // 471  // 498\n  ();                                                                                   // 472  // 499\n                                                                                        // 473  // 500\ninline.reflink = replace(inline.reflink)                                                // 474  // 501\n  ('inside', inline._inside)                                                            // 475  // 502\n  ();                                                                                   // 476  // 503\n                                                                                        // 477  // 504\n/**                                                                                     // 478  // 505\n * Normal Inline Grammar                                                                // 479  // 506\n */                                                                                     // 480  // 507\n                                                                                        // 481  // 508\ninline.normal = merge({}, inline);                                                      // 482  // 509\n                                                                                        // 483  // 510\n/**                                                                                     // 484  // 511\n * Pedantic Inline Grammar                                                              // 485  // 512\n */                                                                                     // 486  // 513\n                                                                                        // 487  // 514\ninline.pedantic = merge({}, inline.normal, {                                            // 488  // 515\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,             // 489  // 516\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/                        // 490  // 517\n});                                                                                     // 491  // 518\n                                                                                        // 492  // 519\n/**                                                                                     // 493  // 520\n * GFM Inline Grammar                                                                   // 494  // 521\n */                                                                                     // 495  // 522\n                                                                                        // 496  // 523\ninline.gfm = merge({}, inline.normal, {                                                 // 497  // 524\n  escape: replace(inline.escape)('])', '~|])')(),                                       // 498  // 525\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,                                          // 499  // 526\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,                                                       // 500  // 527\n  text: replace(inline.text)                                                            // 501  // 528\n    (']|', '~]|')                                                                       // 502  // 529\n    ('|', '|https?://|')                                                                // 503  // 530\n    ()                                                                                  // 504  // 531\n});                                                                                     // 505  // 532\n                                                                                        // 506  // 533\n/**                                                                                     // 507  // 534\n * GFM + Line Breaks Inline Grammar                                                     // 508  // 535\n */                                                                                     // 509  // 536\n                                                                                        // 510  // 537\ninline.breaks = merge({}, inline.gfm, {                                                 // 511  // 538\n  br: replace(inline.br)('{2,}', '*')(),                                                // 512  // 539\n  text: replace(inline.gfm.text)('{2,}', '*')()                                         // 513  // 540\n});                                                                                     // 514  // 541\n                                                                                        // 515  // 542\n/**                                                                                     // 516  // 543\n * Inline Lexer & Compiler                                                              // 517  // 544\n */                                                                                     // 518  // 545\n                                                                                        // 519  // 546\nfunction InlineLexer(links, options) {                                                  // 520  // 547\n  this.options = options || marked.defaults;                                            // 521  // 548\n  this.links = links;                                                                   // 522  // 549\n  this.rules = inline.normal;                                                           // 523  // 550\n  this.renderer = this.options.renderer || new Renderer;                                // 524  // 551\n  this.renderer.options = this.options;                                                 // 525  // 552\n                                                                                        // 526  // 553\n  if (!this.links) {                                                                    // 527  // 554\n    throw new                                                                           // 528  // 555\n      Error('Tokens array requires a `links` property.');                               // 529  // 556\n  }                                                                                     // 530  // 557\n                                                                                        // 531  // 558\n  if (this.options.gfm) {                                                               // 532  // 559\n    if (this.options.breaks) {                                                          // 533  // 560\n      this.rules = inline.breaks;                                                       // 534  // 561\n    } else {                                                                            // 535  // 562\n      this.rules = inline.gfm;                                                          // 536  // 563\n    }                                                                                   // 537  // 564\n  } else if (this.options.pedantic) {                                                   // 538  // 565\n    this.rules = inline.pedantic;                                                       // 539  // 566\n  }                                                                                     // 540  // 567\n}                                                                                       // 541  // 568\n                                                                                        // 542  // 569\n/**                                                                                     // 543  // 570\n * Expose Inline Rules                                                                  // 544  // 571\n */                                                                                     // 545  // 572\n                                                                                        // 546  // 573\nInlineLexer.rules = inline;                                                             // 547  // 574\n                                                                                        // 548  // 575\n/**                                                                                     // 549  // 576\n * Static Lexing/Compiling Method                                                       // 550  // 577\n */                                                                                     // 551  // 578\n                                                                                        // 552  // 579\nInlineLexer.output = function(src, links, options) {                                    // 553  // 580\n  var inline = new InlineLexer(links, options);                                         // 554  // 581\n  return inline.output(src);                                                            // 555  // 582\n};                                                                                      // 556  // 583\n                                                                                        // 557  // 584\n/**                                                                                     // 558  // 585\n * Lexing/Compiling                                                                     // 559  // 586\n */                                                                                     // 560  // 587\n                                                                                        // 561  // 588\nInlineLexer.prototype.output = function(src) {                                          // 562  // 589\n  var out = ''                                                                          // 563  // 590\n    , link                                                                              // 564  // 591\n    , text                                                                              // 565  // 592\n    , href                                                                              // 566  // 593\n    , cap;                                                                              // 567  // 594\n                                                                                        // 568  // 595\n  while (src) {                                                                         // 569  // 596\n    // escape                                                                           // 570  // 597\n    if (cap = this.rules.escape.exec(src)) {                                            // 571  // 598\n      src = src.substring(cap[0].length);                                               // 572  // 599\n      out += cap[1];                                                                    // 573  // 600\n      continue;                                                                         // 574  // 601\n    }                                                                                   // 575  // 602\n                                                                                        // 576  // 603\n    // autolink                                                                         // 577  // 604\n    if (cap = this.rules.autolink.exec(src)) {                                          // 578  // 605\n      src = src.substring(cap[0].length);                                               // 579  // 606\n      if (cap[2] === '@') {                                                             // 580  // 607\n        text = cap[1].charAt(6) === ':'                                                 // 581  // 608\n          ? this.mangle(cap[1].substring(7))                                            // 582  // 609\n          : this.mangle(cap[1]);                                                        // 583  // 610\n        href = this.mangle('mailto:') + text;                                           // 584  // 611\n      } else {                                                                          // 585  // 612\n        text = escape(cap[1]);                                                          // 586  // 613\n        href = text;                                                                    // 587  // 614\n      }                                                                                 // 588  // 615\n      out += this.renderer.link(href, null, text);                                      // 589  // 616\n      continue;                                                                         // 590  // 617\n    }                                                                                   // 591  // 618\n                                                                                        // 592  // 619\n    // url (gfm)                                                                        // 593  // 620\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {                             // 594  // 621\n      src = src.substring(cap[0].length);                                               // 595  // 622\n      text = escape(cap[1]);                                                            // 596  // 623\n      href = text;                                                                      // 597  // 624\n      out += this.renderer.link(href, null, text);                                      // 598  // 625\n      continue;                                                                         // 599  // 626\n    }                                                                                   // 600  // 627\n                                                                                        // 601  // 628\n    // tag                                                                              // 602  // 629\n    if (cap = this.rules.tag.exec(src)) {                                               // 603  // 630\n      if (!this.inLink && /^<a /i.test(cap[0])) {                                       // 604  // 631\n        this.inLink = true;                                                             // 605  // 632\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {                               // 606  // 633\n        this.inLink = false;                                                            // 607  // 634\n      }                                                                                 // 608  // 635\n      src = src.substring(cap[0].length);                                               // 609  // 636\n      out += this.options.sanitize                                                      // 610  // 637\n        ? this.options.sanitizer                                                        // 611  // 638\n          ? this.options.sanitizer(cap[0])                                              // 612  // 639\n          : escape(cap[0])                                                              // 613  // 640\n        : cap[0]                                                                        // 614  // 641\n      continue;                                                                         // 615  // 642\n    }                                                                                   // 616  // 643\n                                                                                        // 617  // 644\n    // link                                                                             // 618  // 645\n    if (cap = this.rules.link.exec(src)) {                                              // 619  // 646\n      src = src.substring(cap[0].length);                                               // 620  // 647\n      this.inLink = true;                                                               // 621  // 648\n      out += this.outputLink(cap, {                                                     // 622  // 649\n        href: cap[2],                                                                   // 623  // 650\n        title: cap[3]                                                                   // 624  // 651\n      });                                                                               // 625  // 652\n      this.inLink = false;                                                              // 626  // 653\n      continue;                                                                         // 627  // 654\n    }                                                                                   // 628  // 655\n                                                                                        // 629  // 656\n    // reflink, nolink                                                                  // 630  // 657\n    if ((cap = this.rules.reflink.exec(src))                                            // 631  // 658\n        || (cap = this.rules.nolink.exec(src))) {                                       // 632  // 659\n      src = src.substring(cap[0].length);                                               // 633  // 660\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');                                   // 634  // 661\n      link = this.links[link.toLowerCase()];                                            // 635  // 662\n      if (!link || !link.href) {                                                        // 636  // 663\n        out += cap[0].charAt(0);                                                        // 637  // 664\n        src = cap[0].substring(1) + src;                                                // 638  // 665\n        continue;                                                                       // 639  // 666\n      }                                                                                 // 640  // 667\n      this.inLink = true;                                                               // 641  // 668\n      out += this.outputLink(cap, link);                                                // 642  // 669\n      this.inLink = false;                                                              // 643  // 670\n      continue;                                                                         // 644  // 671\n    }                                                                                   // 645  // 672\n                                                                                        // 646  // 673\n    // strong                                                                           // 647  // 674\n    if (cap = this.rules.strong.exec(src)) {                                            // 648  // 675\n      src = src.substring(cap[0].length);                                               // 649  // 676\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));                       // 650  // 677\n      continue;                                                                         // 651  // 678\n    }                                                                                   // 652  // 679\n                                                                                        // 653  // 680\n    // em                                                                               // 654  // 681\n    if (cap = this.rules.em.exec(src)) {                                                // 655  // 682\n      src = src.substring(cap[0].length);                                               // 656  // 683\n      out += this.renderer.em(this.output(cap[2] || cap[1]));                           // 657  // 684\n      continue;                                                                         // 658  // 685\n    }                                                                                   // 659  // 686\n                                                                                        // 660  // 687\n    // code                                                                             // 661  // 688\n    if (cap = this.rules.code.exec(src)) {                                              // 662  // 689\n      src = src.substring(cap[0].length);                                               // 663  // 690\n      out += this.renderer.codespan(escape(cap[2], true));                              // 664  // 691\n      continue;                                                                         // 665  // 692\n    }                                                                                   // 666  // 693\n                                                                                        // 667  // 694\n    // br                                                                               // 668  // 695\n    if (cap = this.rules.br.exec(src)) {                                                // 669  // 696\n      src = src.substring(cap[0].length);                                               // 670  // 697\n      out += this.renderer.br();                                                        // 671  // 698\n      continue;                                                                         // 672  // 699\n    }                                                                                   // 673  // 700\n                                                                                        // 674  // 701\n    // del (gfm)                                                                        // 675  // 702\n    if (cap = this.rules.del.exec(src)) {                                               // 676  // 703\n      src = src.substring(cap[0].length);                                               // 677  // 704\n      out += this.renderer.del(this.output(cap[1]));                                    // 678  // 705\n      continue;                                                                         // 679  // 706\n    }                                                                                   // 680  // 707\n                                                                                        // 681  // 708\n    // text                                                                             // 682  // 709\n    if (cap = this.rules.text.exec(src)) {                                              // 683  // 710\n      src = src.substring(cap[0].length);                                               // 684  // 711\n      out += this.renderer.text(escape(this.smartypants(cap[0])));                      // 685  // 712\n      continue;                                                                         // 686  // 713\n    }                                                                                   // 687  // 714\n                                                                                        // 688  // 715\n    if (src) {                                                                          // 689  // 716\n      throw new                                                                         // 690  // 717\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 691  // 718\n    }                                                                                   // 692  // 719\n  }                                                                                     // 693  // 720\n                                                                                        // 694  // 721\n  return out;                                                                           // 695  // 722\n};                                                                                      // 696  // 723\n                                                                                        // 697  // 724\n/**                                                                                     // 698  // 725\n * Compile Link                                                                         // 699  // 726\n */                                                                                     // 700  // 727\n                                                                                        // 701  // 728\nInlineLexer.prototype.outputLink = function(cap, link) {                                // 702  // 729\n  var href = escape(link.href)                                                          // 703  // 730\n    , title = link.title ? escape(link.title) : null;                                   // 704  // 731\n                                                                                        // 705  // 732\n  return cap[0].charAt(0) !== '!'                                                       // 706  // 733\n    ? this.renderer.link(href, title, this.output(cap[1]))                              // 707  // 734\n    : this.renderer.image(href, title, escape(cap[1]));                                 // 708  // 735\n};                                                                                      // 709  // 736\n                                                                                        // 710  // 737\n/**                                                                                     // 711  // 738\n * Smartypants Transformations                                                          // 712  // 739\n */                                                                                     // 713  // 740\n                                                                                        // 714  // 741\nInlineLexer.prototype.smartypants = function(text) {                                    // 715  // 742\n  if (!this.options.smartypants) return text;                                           // 716  // 743\n  return text                                                                           // 717  // 744\n    // em-dashes                                                                        // 718  // 745\n    .replace(/---/g, '\\u2014')                                                          // 719  // 746\n    // en-dashes                                                                        // 720  // 747\n    .replace(/--/g, '\\u2013')                                                           // 721  // 748\n    // opening singles                                                                  // 722  // 749\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')                                     // 723  // 750\n    // closing singles & apostrophes                                                    // 724  // 751\n    .replace(/'/g, '\\u2019')                                                            // 725  // 752\n    // opening doubles                                                                  // 726  // 753\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')                                // 727  // 754\n    // closing doubles                                                                  // 728  // 755\n    .replace(/\"/g, '\\u201d')                                                            // 729  // 756\n    // ellipses                                                                         // 730  // 757\n    .replace(/\\.{3}/g, '\\u2026');                                                       // 731  // 758\n};                                                                                      // 732  // 759\n                                                                                        // 733  // 760\n/**                                                                                     // 734  // 761\n * Mangle Links                                                                         // 735  // 762\n */                                                                                     // 736  // 763\n                                                                                        // 737  // 764\nInlineLexer.prototype.mangle = function(text) {                                         // 738  // 765\n  if (!this.options.mangle) return text;                                                // 739  // 766\n  var out = ''                                                                          // 740  // 767\n    , l = text.length                                                                   // 741  // 768\n    , i = 0                                                                             // 742  // 769\n    , ch;                                                                               // 743  // 770\n                                                                                        // 744  // 771\n  for (; i < l; i++) {                                                                  // 745  // 772\n    ch = text.charCodeAt(i);                                                            // 746  // 773\n    if (Math.random() > 0.5) {                                                          // 747  // 774\n      ch = 'x' + ch.toString(16);                                                       // 748  // 775\n    }                                                                                   // 749  // 776\n    out += '&#' + ch + ';';                                                             // 750  // 777\n  }                                                                                     // 751  // 778\n                                                                                        // 752  // 779\n  return out;                                                                           // 753  // 780\n};                                                                                      // 754  // 781\n                                                                                        // 755  // 782\n/**                                                                                     // 756  // 783\n * Renderer                                                                             // 757  // 784\n */                                                                                     // 758  // 785\n                                                                                        // 759  // 786\nfunction Renderer(options) {                                                            // 760  // 787\n  this.options = options || {};                                                         // 761  // 788\n}                                                                                       // 762  // 789\n                                                                                        // 763  // 790\nRenderer.prototype.code = function(code, lang, escaped) {                               // 764  // 791\n  if (this.options.highlight) {                                                         // 765  // 792\n    var out = this.options.highlight(code, lang);                                       // 766  // 793\n    if (out != null && out !== code) {                                                  // 767  // 794\n      escaped = true;                                                                   // 768  // 795\n      code = out;                                                                       // 769  // 796\n    }                                                                                   // 770  // 797\n  }                                                                                     // 771  // 798\n                                                                                        // 772  // 799\n  if (!lang) {                                                                          // 773  // 800\n    return '<pre><code>'                                                                // 774  // 801\n      + (escaped ? code : escape(code, true))                                           // 775  // 802\n      + '\\n</code></pre>';                                                              // 776  // 803\n  }                                                                                     // 777  // 804\n                                                                                        // 778  // 805\n  return '<pre><code class=\"'                                                           // 779  // 806\n    + this.options.langPrefix                                                           // 780  // 807\n    + escape(lang, true)                                                                // 781  // 808\n    + '\">'                                                                              // 782  // 809\n    + (escaped ? code : escape(code, true))                                             // 783  // 810\n    + '\\n</code></pre>\\n';                                                              // 784  // 811\n};                                                                                      // 785  // 812\n                                                                                        // 786  // 813\nRenderer.prototype.blockquote = function(quote) {                                       // 787  // 814\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';                                  // 788  // 815\n};                                                                                      // 789  // 816\n                                                                                        // 790  // 817\nRenderer.prototype.html = function(html) {                                              // 791  // 818\n  return html;                                                                          // 792  // 819\n};                                                                                      // 793  // 820\n                                                                                        // 794  // 821\nRenderer.prototype.heading = function(text, level, raw) {                               // 795  // 822\n  return '<h'                                                                           // 796  // 823\n    + level                                                                             // 797  // 824\n    + ' id=\"'                                                                           // 798  // 825\n    + this.options.headerPrefix                                                         // 799  // 826\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')                                         // 800  // 827\n    + '\">'                                                                              // 801  // 828\n    + text                                                                              // 802  // 829\n    + '</h'                                                                             // 803  // 830\n    + level                                                                             // 804  // 831\n    + '>\\n';                                                                            // 805  // 832\n};                                                                                      // 806  // 833\n                                                                                        // 807  // 834\nRenderer.prototype.hr = function() {                                                    // 808  // 835\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';                                     // 809  // 836\n};                                                                                      // 810  // 837\n                                                                                        // 811  // 838\nRenderer.prototype.list = function(body, ordered) {                                     // 812  // 839\n  var type = ordered ? 'ol' : 'ul';                                                     // 813  // 840\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';                               // 814  // 841\n};                                                                                      // 815  // 842\n                                                                                        // 816  // 843\nRenderer.prototype.listitem = function(text) {                                          // 817  // 844\n  return '<li>' + text + '</li>\\n';                                                     // 818  // 845\n};                                                                                      // 819  // 846\n                                                                                        // 820  // 847\nRenderer.prototype.paragraph = function(text) {                                         // 821  // 848\n  return '<p>' + text + '</p>\\n';                                                       // 822  // 849\n};                                                                                      // 823  // 850\n                                                                                        // 824  // 851\nRenderer.prototype.table = function(header, body) {                                     // 825  // 852\n  return '<table>\\n'                                                                    // 826  // 853\n    + '<thead>\\n'                                                                       // 827  // 854\n    + header                                                                            // 828  // 855\n    + '</thead>\\n'                                                                      // 829  // 856\n    + '<tbody>\\n'                                                                       // 830  // 857\n    + body                                                                              // 831  // 858\n    + '</tbody>\\n'                                                                      // 832  // 859\n    + '</table>\\n';                                                                     // 833  // 860\n};                                                                                      // 834  // 861\n                                                                                        // 835  // 862\nRenderer.prototype.tablerow = function(content) {                                       // 836  // 863\n  return '<tr>\\n' + content + '</tr>\\n';                                                // 837  // 864\n};                                                                                      // 838  // 865\n                                                                                        // 839  // 866\nRenderer.prototype.tablecell = function(content, flags) {                               // 840  // 867\n  var type = flags.header ? 'th' : 'td';                                                // 841  // 868\n  var tag = flags.align                                                                 // 842  // 869\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'                           // 843  // 870\n    : '<' + type + '>';                                                                 // 844  // 871\n  return tag + content + '</' + type + '>\\n';                                           // 845  // 872\n};                                                                                      // 846  // 873\n                                                                                        // 847  // 874\n// span level renderer                                                                  // 848  // 875\nRenderer.prototype.strong = function(text) {                                            // 849  // 876\n  return '<strong>' + text + '</strong>';                                               // 850  // 877\n};                                                                                      // 851  // 878\n                                                                                        // 852  // 879\nRenderer.prototype.em = function(text) {                                                // 853  // 880\n  return '<em>' + text + '</em>';                                                       // 854  // 881\n};                                                                                      // 855  // 882\n                                                                                        // 856  // 883\nRenderer.prototype.codespan = function(text) {                                          // 857  // 884\n  return '<code>' + text + '</code>';                                                   // 858  // 885\n};                                                                                      // 859  // 886\n                                                                                        // 860  // 887\nRenderer.prototype.br = function() {                                                    // 861  // 888\n  return this.options.xhtml ? '<br/>' : '<br>';                                         // 862  // 889\n};                                                                                      // 863  // 890\n                                                                                        // 864  // 891\nRenderer.prototype.del = function(text) {                                               // 865  // 892\n  return '<del>' + text + '</del>';                                                     // 866  // 893\n};                                                                                      // 867  // 894\n                                                                                        // 868  // 895\nRenderer.prototype.link = function(href, title, text) {                                 // 869  // 896\n  if (this.options.sanitize) {                                                          // 870  // 897\n    try {                                                                               // 871  // 898\n      var prot = decodeURIComponent(unescape(href))                                     // 872  // 899\n        .replace(/[^\\w:]/g, '')                                                         // 873  // 900\n        .toLowerCase();                                                                 // 874  // 901\n    } catch (e) {                                                                       // 875  // 902\n      return '';                                                                        // 876  // 903\n    }                                                                                   // 877  // 904\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {         // 878  // 905\n      return '';                                                                        // 879  // 906\n    }                                                                                   // 880  // 907\n  }                                                                                     // 881  // 908\n  var out = '<a href=\"' + href + '\"';                                                   // 882  // 909\n  if (title) {                                                                          // 883  // 910\n    out += ' title=\"' + title + '\"';                                                    // 884  // 911\n  }                                                                                     // 885  // 912\n  out += '>' + text + '</a>';                                                           // 886  // 913\n  return out;                                                                           // 887  // 914\n};                                                                                      // 888  // 915\n                                                                                        // 889  // 916\nRenderer.prototype.image = function(href, title, text) {                                // 890  // 917\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';                               // 891  // 918\n  if (title) {                                                                          // 892  // 919\n    out += ' title=\"' + title + '\"';                                                    // 893  // 920\n  }                                                                                     // 894  // 921\n  out += this.options.xhtml ? '/>' : '>';                                               // 895  // 922\n  return out;                                                                           // 896  // 923\n};                                                                                      // 897  // 924\n                                                                                        // 898  // 925\nRenderer.prototype.text = function(text) {                                              // 899  // 926\n  return text;                                                                          // 900  // 927\n};                                                                                      // 901  // 928\n                                                                                        // 902  // 929\n/**                                                                                     // 903  // 930\n * Parsing & Compiling                                                                  // 904  // 931\n */                                                                                     // 905  // 932\n                                                                                        // 906  // 933\nfunction Parser(options) {                                                              // 907  // 934\n  this.tokens = [];                                                                     // 908  // 935\n  this.token = null;                                                                    // 909  // 936\n  this.options = options || marked.defaults;                                            // 910  // 937\n  this.options.renderer = this.options.renderer || new Renderer;                        // 911  // 938\n  this.renderer = this.options.renderer;                                                // 912  // 939\n  this.renderer.options = this.options;                                                 // 913  // 940\n}                                                                                       // 914  // 941\n                                                                                        // 915  // 942\n/**                                                                                     // 916  // 943\n * Static Parse Method                                                                  // 917  // 944\n */                                                                                     // 918  // 945\n                                                                                        // 919  // 946\nParser.parse = function(src, options, renderer) {                                       // 920  // 947\n  var parser = new Parser(options, renderer);                                           // 921  // 948\n  return parser.parse(src);                                                             // 922  // 949\n};                                                                                      // 923  // 950\n                                                                                        // 924  // 951\n/**                                                                                     // 925  // 952\n * Parse Loop                                                                           // 926  // 953\n */                                                                                     // 927  // 954\n                                                                                        // 928  // 955\nParser.prototype.parse = function(src) {                                                // 929  // 956\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);                // 930  // 957\n  this.tokens = src.reverse();                                                          // 931  // 958\n                                                                                        // 932  // 959\n  var out = '';                                                                         // 933  // 960\n  while (this.next()) {                                                                 // 934  // 961\n    out += this.tok();                                                                  // 935  // 962\n  }                                                                                     // 936  // 963\n                                                                                        // 937  // 964\n  return out;                                                                           // 938  // 965\n};                                                                                      // 939  // 966\n                                                                                        // 940  // 967\n/**                                                                                     // 941  // 968\n * Next Token                                                                           // 942  // 969\n */                                                                                     // 943  // 970\n                                                                                        // 944  // 971\nParser.prototype.next = function() {                                                    // 945  // 972\n  return this.token = this.tokens.pop();                                                // 946  // 973\n};                                                                                      // 947  // 974\n                                                                                        // 948  // 975\n/**                                                                                     // 949  // 976\n * Preview Next Token                                                                   // 950  // 977\n */                                                                                     // 951  // 978\n                                                                                        // 952  // 979\nParser.prototype.peek = function() {                                                    // 953  // 980\n  return this.tokens[this.tokens.length - 1] || 0;                                      // 954  // 981\n};                                                                                      // 955  // 982\n                                                                                        // 956  // 983\n/**                                                                                     // 957  // 984\n * Parse Text Tokens                                                                    // 958  // 985\n */                                                                                     // 959  // 986\n                                                                                        // 960  // 987\nParser.prototype.parseText = function() {                                               // 961  // 988\n  var body = this.token.text;                                                           // 962  // 989\n                                                                                        // 963  // 990\n  while (this.peek().type === 'text') {                                                 // 964  // 991\n    body += '\\n' + this.next().text;                                                    // 965  // 992\n  }                                                                                     // 966  // 993\n                                                                                        // 967  // 994\n  return this.inline.output(body);                                                      // 968  // 995\n};                                                                                      // 969  // 996\n                                                                                        // 970  // 997\n/**                                                                                     // 971  // 998\n * Parse Current Token                                                                  // 972  // 999\n */                                                                                     // 973  // 1000\n                                                                                        // 974  // 1001\nParser.prototype.tok = function() {                                                     // 975  // 1002\n  switch (this.token.type) {                                                            // 976  // 1003\n    case 'space': {                                                                     // 977  // 1004\n      return '';                                                                        // 978  // 1005\n    }                                                                                   // 979  // 1006\n    case 'hr': {                                                                        // 980  // 1007\n      return this.renderer.hr();                                                        // 981  // 1008\n    }                                                                                   // 982  // 1009\n    case 'heading': {                                                                   // 983  // 1010\n      return this.renderer.heading(                                                     // 984  // 1011\n        this.inline.output(this.token.text),                                            // 985  // 1012\n        this.token.depth,                                                               // 986  // 1013\n        this.token.text);                                                               // 987  // 1014\n    }                                                                                   // 988  // 1015\n    case 'code': {                                                                      // 989  // 1016\n      return this.renderer.code(this.token.text,                                        // 990  // 1017\n        this.token.lang,                                                                // 991  // 1018\n        this.token.escaped);                                                            // 992  // 1019\n    }                                                                                   // 993  // 1020\n    case 'table': {                                                                     // 994  // 1021\n      var header = ''                                                                   // 995  // 1022\n        , body = ''                                                                     // 996  // 1023\n        , i                                                                             // 997  // 1024\n        , row                                                                           // 998  // 1025\n        , cell                                                                          // 999  // 1026\n        , flags                                                                         // 1000\n        , j;                                                                            // 1001\n                                                                                        // 1002\n      // header                                                                         // 1003\n      cell = '';                                                                        // 1004\n      for (i = 0; i < this.token.header.length; i++) {                                  // 1005\n        flags = { header: true, align: this.token.align[i] };                           // 1006\n        cell += this.renderer.tablecell(                                                // 1007\n          this.inline.output(this.token.header[i]),                                     // 1008\n          { header: true, align: this.token.align[i] }                                  // 1009\n        );                                                                              // 1010\n      }                                                                                 // 1011\n      header += this.renderer.tablerow(cell);                                           // 1012\n                                                                                        // 1013\n      for (i = 0; i < this.token.cells.length; i++) {                                   // 1014\n        row = this.token.cells[i];                                                      // 1015\n                                                                                        // 1016\n        cell = '';                                                                      // 1017\n        for (j = 0; j < row.length; j++) {                                              // 1018\n          cell += this.renderer.tablecell(                                              // 1019\n            this.inline.output(row[j]),                                                 // 1020\n            { header: false, align: this.token.align[j] }                               // 1021\n          );                                                                            // 1022\n        }                                                                               // 1023\n                                                                                        // 1024\n        body += this.renderer.tablerow(cell);                                           // 1025\n      }                                                                                 // 1026\n      return this.renderer.table(header, body);                                         // 1027\n    }                                                                                   // 1028\n    case 'blockquote_start': {                                                          // 1029\n      var body = '';                                                                    // 1030\n                                                                                        // 1031\n      while (this.next().type !== 'blockquote_end') {                                   // 1032\n        body += this.tok();                                                             // 1033\n      }                                                                                 // 1034\n                                                                                        // 1035\n      return this.renderer.blockquote(body);                                            // 1036\n    }                                                                                   // 1037\n    case 'list_start': {                                                                // 1038\n      var body = ''                                                                     // 1039\n        , ordered = this.token.ordered;                                                 // 1040\n                                                                                        // 1041\n      while (this.next().type !== 'list_end') {                                         // 1042\n        body += this.tok();                                                             // 1043\n      }                                                                                 // 1044\n                                                                                        // 1045\n      return this.renderer.list(body, ordered);                                         // 1046\n    }                                                                                   // 1047\n    case 'list_item_start': {                                                           // 1048\n      var body = '';                                                                    // 1049\n                                                                                        // 1050\n      while (this.next().type !== 'list_item_end') {                                    // 1051\n        body += this.token.type === 'text'                                              // 1052\n          ? this.parseText()                                                            // 1053\n          : this.tok();                                                                 // 1054\n      }                                                                                 // 1055\n                                                                                        // 1056\n      return this.renderer.listitem(body);                                              // 1057\n    }                                                                                   // 1058\n    case 'loose_item_start': {                                                          // 1059\n      var body = '';                                                                    // 1060\n                                                                                        // 1061\n      while (this.next().type !== 'list_item_end') {                                    // 1062\n        body += this.tok();                                                             // 1063\n      }                                                                                 // 1064\n                                                                                        // 1065\n      return this.renderer.listitem(body);                                              // 1066\n    }                                                                                   // 1067\n    case 'html': {                                                                      // 1068\n      var html = !this.token.pre && !this.options.pedantic                              // 1069\n        ? this.inline.output(this.token.text)                                           // 1070\n        : this.token.text;                                                              // 1071\n      return this.renderer.html(html);                                                  // 1072\n    }                                                                                   // 1073\n    case 'paragraph': {                                                                 // 1074\n      return this.renderer.paragraph(this.inline.output(this.token.text));              // 1075\n    }                                                                                   // 1076\n    case 'text': {                                                                      // 1077\n      return this.renderer.paragraph(this.parseText());                                 // 1078\n    }                                                                                   // 1079\n  }                                                                                     // 1080\n};                                                                                      // 1081\n                                                                                        // 1082\n/**                                                                                     // 1083\n * Helpers                                                                              // 1084\n */                                                                                     // 1085\n                                                                                        // 1086\nfunction escape(html, encode) {                                                         // 1087\n  return html                                                                           // 1088\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')                                  // 1089\n    .replace(/</g, '&lt;')                                                              // 1090\n    .replace(/>/g, '&gt;')                                                              // 1091\n    .replace(/\"/g, '&quot;')                                                            // 1092\n    .replace(/'/g, '&#39;');                                                            // 1093\n}                                                                                       // 1094\n                                                                                        // 1095\nfunction unescape(html) {                                                               // 1096\n  return html.replace(/&([#\\w]+);/g, function(_, n) {                                   // 1097\n    n = n.toLowerCase();                                                                // 1098\n    if (n === 'colon') return ':';                                                      // 1099\n    if (n.charAt(0) === '#') {                                                          // 1100\n      return n.charAt(1) === 'x'                                                        // 1101\n        ? String.fromCharCode(parseInt(n.substring(2), 16))                             // 1102\n        : String.fromCharCode(+n.substring(1));                                         // 1103\n    }                                                                                   // 1104\n    return '';                                                                          // 1105\n  });                                                                                   // 1106\n}                                                                                       // 1107\n                                                                                        // 1108\nfunction replace(regex, opt) {                                                          // 1109\n  regex = regex.source;                                                                 // 1110\n  opt = opt || '';                                                                      // 1111\n  return function self(name, val) {                                                     // 1112\n    if (!name) return new RegExp(regex, opt);                                           // 1113\n    val = val.source || val;                                                            // 1114\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');                                            // 1115\n    regex = regex.replace(name, val);                                                   // 1116\n    return self;                                                                        // 1117\n  };                                                                                    // 1118\n}                                                                                       // 1119\n                                                                                        // 1120\nfunction noop() {}                                                                      // 1121\nnoop.exec = noop;                                                                       // 1122\n                                                                                        // 1123\nfunction merge(obj) {                                                                   // 1124\n  var i = 1                                                                             // 1125\n    , target                                                                            // 1126\n    , key;                                                                              // 1127\n                                                                                        // 1128\n  for (; i < arguments.length; i++) {                                                   // 1129\n    target = arguments[i];                                                              // 1130\n    for (key in target) {                                                               // 1131\n      if (Object.prototype.hasOwnProperty.call(target, key)) {                          // 1132\n        obj[key] = target[key];                                                         // 1133\n      }                                                                                 // 1134\n    }                                                                                   // 1135\n  }                                                                                     // 1136\n                                                                                        // 1137\n  return obj;                                                                           // 1138\n}                                                                                       // 1139\n                                                                                        // 1140\n                                                                                        // 1141\n/**                                                                                     // 1142\n * Marked                                                                               // 1143\n */                                                                                     // 1144\n                                                                                        // 1145\nfunction marked(src, opt, callback) {                                                   // 1146\n  if (callback || typeof opt === 'function') {                                          // 1147\n    if (!callback) {                                                                    // 1148\n      callback = opt;                                                                   // 1149\n      opt = null;                                                                       // 1150\n    }                                                                                   // 1151\n                                                                                        // 1152\n    opt = merge({}, marked.defaults, opt || {});                                        // 1153\n                                                                                        // 1154\n    var highlight = opt.highlight                                                       // 1155\n      , tokens                                                                          // 1156\n      , pending                                                                         // 1157\n      , i = 0;                                                                          // 1158\n                                                                                        // 1159\n    try {                                                                               // 1160\n      tokens = Lexer.lex(src, opt)                                                      // 1161\n    } catch (e) {                                                                       // 1162\n      return callback(e);                                                               // 1163\n    }                                                                                   // 1164\n                                                                                        // 1165\n    pending = tokens.length;                                                            // 1166\n                                                                                        // 1167\n    var done = function(err) {                                                          // 1168\n      if (err) {                                                                        // 1169\n        opt.highlight = highlight;                                                      // 1170\n        return callback(err);                                                           // 1171\n      }                                                                                 // 1172\n                                                                                        // 1173\n      var out;                                                                          // 1174\n                                                                                        // 1175\n      try {                                                                             // 1176\n        out = Parser.parse(tokens, opt);                                                // 1177\n      } catch (e) {                                                                     // 1178\n        err = e;                                                                        // 1179\n      }                                                                                 // 1180\n                                                                                        // 1181\n      opt.highlight = highlight;                                                        // 1182\n                                                                                        // 1183\n      return err                                                                        // 1184\n        ? callback(err)                                                                 // 1185\n        : callback(null, out);                                                          // 1186\n    };                                                                                  // 1187\n                                                                                        // 1188\n    if (!highlight || highlight.length < 3) {                                           // 1189\n      return done();                                                                    // 1190\n    }                                                                                   // 1191\n                                                                                        // 1192\n    delete opt.highlight;                                                               // 1193\n                                                                                        // 1194\n    if (!pending) return done();                                                        // 1195\n                                                                                        // 1196\n    for (; i < tokens.length; i++) {                                                    // 1197\n      (function(token) {                                                                // 1198\n        if (token.type !== 'code') {                                                    // 1199\n          return --pending || done();                                                   // 1200\n        }                                                                               // 1201\n        return highlight(token.text, token.lang, function(err, code) {                  // 1202\n          if (err) return done(err);                                                    // 1203\n          if (code == null || code === token.text) {                                    // 1204\n            return --pending || done();                                                 // 1205\n          }                                                                             // 1206\n          token.text = code;                                                            // 1207\n          token.escaped = true;                                                         // 1208\n          --pending || done();                                                          // 1209\n        });                                                                             // 1210\n      })(tokens[i]);                                                                    // 1211\n    }                                                                                   // 1212\n                                                                                        // 1213\n    return;                                                                             // 1214\n  }                                                                                     // 1215\n  try {                                                                                 // 1216\n    if (opt) opt = merge({}, marked.defaults, opt);                                     // 1217\n    return Parser.parse(Lexer.lex(src, opt), opt);                                      // 1218\n  } catch (e) {                                                                         // 1219\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';             // 1220\n    if ((opt || marked.defaults).silent) {                                              // 1221\n      return '<p>An error occured:</p><pre>'                                            // 1222\n        + escape(e.message + '', true)                                                  // 1223\n        + '</pre>';                                                                     // 1224\n    }                                                                                   // 1225\n    throw e;                                                                            // 1226\n  }                                                                                     // 1227\n}                                                                                       // 1228\n                                                                                        // 1229\n/**                                                                                     // 1230\n * Options                                                                              // 1231\n */                                                                                     // 1232\n                                                                                        // 1233\nmarked.options =                                                                        // 1234\nmarked.setOptions = function(opt) {                                                     // 1235\n  merge(marked.defaults, opt);                                                          // 1236\n  return marked;                                                                        // 1237\n};                                                                                      // 1238\n                                                                                        // 1239\nmarked.defaults = {                                                                     // 1240\n  gfm: true,                                                                            // 1241\n  tables: true,                                                                         // 1242\n  breaks: false,                                                                        // 1243\n  pedantic: false,                                                                      // 1244\n  sanitize: false,                                                                      // 1245\n  sanitizer: null,                                                                      // 1246\n  mangle: true,                                                                         // 1247\n  smartLists: false,                                                                    // 1248\n  silent: false,                                                                        // 1249\n  highlight: null,                                                                      // 1250\n  langPrefix: 'lang-',                                                                  // 1251\n  smartypants: false,                                                                   // 1252\n  headerPrefix: '',                                                                     // 1253\n  renderer: new Renderer,                                                               // 1254\n  xhtml: false                                                                          // 1255\n};                                                                                      // 1256\n                                                                                        // 1257\n/**                                                                                     // 1258\n * Expose                                                                               // 1259\n */                                                                                     // 1260\n                                                                                        // 1261\nmarked.Parser = Parser;                                                                 // 1262\nmarked.parser = Parser.parse;                                                           // 1263\n                                                                                        // 1264\nmarked.Renderer = Renderer;                                                             // 1265\n                                                                                        // 1266\nmarked.Lexer = Lexer;                                                                   // 1267\nmarked.lexer = Lexer.lex;                                                               // 1268\n                                                                                        // 1269\nmarked.InlineLexer = InlineLexer;                                                       // 1270\nmarked.inlineLexer = InlineLexer.output;                                                // 1271\n                                                                                        // 1272\nmarked.parse = marked;                                                                  // 1273\n                                                                                        // 1274\nif (typeof module !== 'undefined' && typeof exports === 'object') {                     // 1275\n  module.exports = marked;                                                              // 1276\n} else if (typeof define === 'function' && define.amd) {                                // 1277\n  define(function() { return marked; });                                                // 1278\n} else {                                                                                // 1279\n  this.marked = marked;                                                                 // 1280\n}                                                                                       // 1281\n                                                                                        // 1282\n}).call(function() {                                                                    // 1283\n  return this || (typeof window !== 'undefined' ? window : global);                     // 1284\n}());                                                                                   // 1285\n                                                                                        // 1286\n//////////////////////////////////////////////////////////////////////////////////////////      // 1314\n                                                                                                // 1315\n}).call(this);                                                                                  // 1316\n                                                                                                // 1317\n                                                                                                // 1318\n                                                                                                // 1319\n                                                                                                // 1320\n                                                                                                // 1321\n                                                                                                // 1322\n(function () {                                                                                  // 1323\n                                                                                                // 1324\n//////////////////////////////////////////////////////////////////////////////////////////      // 1325\n//                                                                                      //      // 1326\n// packages/chuangbo:marked/post-marked.js                                              //      // 1327\n//                                                                                      //      // 1328\n//////////////////////////////////////////////////////////////////////////////////////////      // 1329\n                                                                                        //      // 1330\nmarked = module.exports;                                                                // 1    // 1331\n//////////////////////////////////////////////////////////////////////////////////////////      // 1332\n                                                                                                // 1333\n}).call(this);                                                                                  // 1334\n                                                                                                // 1335\n                                                                                                // 1336\n                                                                                                // 1337\n                                                                                                // 1338\n                                                                                                // 1339\n                                                                                                // 1340\n(function () {                                                                                  // 1341\n                                                                                                // 1342\n//////////////////////////////////////////////////////////////////////////////////////////      // 1343\n//                                                                                      //      // 1344\n// packages/chuangbo:marked/template-integration.js                                     //      // 1345\n//                                                                                      //      // 1346\n//////////////////////////////////////////////////////////////////////////////////////////      // 1347\n                                                                                        //      // 1348\nif (Package.templating) {                                                               // 1    // 1349\n  var Template = Package.templating.Template;                                           // 2    // 1350\n  var HTML = Package.htmljs.HTML; // implied by `ui`                                    // 3    // 1351\n  var Blaze = Package.blaze.Blaze; // implied by `ui`                                   // 4    // 1352\n                                                                                        // 5    // 1353\n  Blaze.registerHelper('markdown', Blaze.Template('markdown', function () {             // 6    // 1354\n    var view = this;                                                                    // 7    // 1355\n    var content = '';                                                                   // 8    // 1356\n    if (view.templateContentBlock) {                                                    // 9    // 1357\n      content = Blaze._toText(view.templateContentBlock, HTML.TEXTMODE.STRING);         // 10   // 1358\n    }                                                                                   // 11   // 1359\n    return HTML.Raw(marked(content));                                                   // 12   // 1360\n  }));                                                                                  // 13   // 1361\n}                                                                                       // 14   // 1362\n                                                                                        // 15   // 1363\n//////////////////////////////////////////////////////////////////////////////////////////      // 1364\n                                                                                                // 1365\n}).call(this);                                                                                  // 1366\n                                                                                                // 1367\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['chuangbo:marked'] = {\n  marked: marked\n};\n\n})();\n","servePath":"/packages/chuangbo_marked.js","sourceMap":{"version":3,"sources":["/packages/chuangbo_marked/packages/chuangbo_marked.js"],"names":[],"mappingsuG","file":"/packages/chuangbo_marked.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/chuangbo:marked/pre-marked.js                                               //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nexports = {};                                                                           // 1\nmodule = {};                                                                            // 2\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/chuangbo:marked/marked/lib/marked.js                                        //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n/**                                                                                     // 1\n * marked - a markdown parser                                                           // 2\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)                         // 3\n * https://github.com/chjj/marked                                                       // 4\n */                                                                                     // 5\n                                                                                        // 6\n;(function() {                                                                          // 7\n                                                                                        // 8\n/**                                                                                     // 9\n * Block-Level Grammar                                                                  // 10\n */                                                                                     // 11\n                                                                                        // 12\nvar block = {                                                                           // 13\n  newline: /^\\n+/,                                                                      // 14\n  code: /^( {4}[^\\n]+\\n*)+/,                                                            // 15\n  fences: noop,                                                                         // 16\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,                                                      // 17\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,                                     // 18\n  nptable: noop,                                                                        // 19\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,                                        // 20\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,                                     // 21\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,                // 22\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/, // 23\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,             // 24\n  table: noop,                                                                          // 25\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,          // 26\n  text: /^[^\\n]+/                                                                       // 27\n};                                                                                      // 28\n                                                                                        // 29\nblock.bullet = /(?:[*+-]|\\d+\\.)/;                                                       // 30\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;                              // 31\nblock.item = replace(block.item, 'gm')                                                  // 32\n  (/bull/g, block.bullet)                                                               // 33\n  ();                                                                                   // 34\n                                                                                        // 35\nblock.list = replace(block.list)                                                        // 36\n  (/bull/g, block.bullet)                                                               // 37\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')                                       // 38\n  ('def', '\\\\n+(?=' + block.def.source + ')')                                           // 39\n  ();                                                                                   // 40\n                                                                                        // 41\nblock.blockquote = replace(block.blockquote)                                            // 42\n  ('def', block.def)                                                                    // 43\n  ();                                                                                   // 44\n                                                                                        // 45\nblock._tag = '(?!(?:'                                                                   // 46\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'                                // 47\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'                               // 48\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';                          // 49\n                                                                                        // 50\nblock.html = replace(block.html)                                                        // 51\n  ('comment', /<!--[\\s\\S]*?-->/)                                                        // 52\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)                                                    // 53\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)                                      // 54\n  (/tag/g, block._tag)                                                                  // 55\n  ();                                                                                   // 56\n                                                                                        // 57\nblock.paragraph = replace(block.paragraph)                                              // 58\n  ('hr', block.hr)                                                                      // 59\n  ('heading', block.heading)                                                            // 60\n  ('lheading', block.lheading)                                                          // 61\n  ('blockquote', block.blockquote)                                                      // 62\n  ('tag', '<' + block._tag)                                                             // 63\n  ('def', block.def)                                                                    // 64\n  ();                                                                                   // 65\n                                                                                        // 66\n/**                                                                                     // 67\n * Normal Block Grammar                                                                 // 68\n */                                                                                     // 69\n                                                                                        // 70\nblock.normal = merge({}, block);                                                        // 71\n                                                                                        // 72\n/**                                                                                     // 73\n * GFM Block Grammar                                                                    // 74\n */                                                                                     // 75\n                                                                                        // 76\nblock.gfm = merge({}, block.normal, {                                                   // 77\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,                 // 78\n  paragraph: /^/,                                                                       // 79\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/                                      // 80\n});                                                                                     // 81\n                                                                                        // 82\nblock.gfm.paragraph = replace(block.paragraph)                                          // 83\n  ('(?!', '(?!'                                                                         // 84\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'                               // 85\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')                                    // 86\n  ();                                                                                   // 87\n                                                                                        // 88\n/**                                                                                     // 89\n * GFM + Tables Block Grammar                                                           // 90\n */                                                                                     // 91\n                                                                                        // 92\nblock.tables = merge({}, block.gfm, {                                                   // 93\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,             // 94\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/                    // 95\n});                                                                                     // 96\n                                                                                        // 97\n/**                                                                                     // 98\n * Block Lexer                                                                          // 99\n */                                                                                     // 100\n                                                                                        // 101\nfunction Lexer(options) {                                                               // 102\n  this.tokens = [];                                                                     // 103\n  this.tokens.links = {};                                                               // 104\n  this.options = options || marked.defaults;                                            // 105\n  this.rules = block.normal;                                                            // 106\n                                                                                        // 107\n  if (this.options.gfm) {                                                               // 108\n    if (this.options.tables) {                                                          // 109\n      this.rules = block.tables;                                                        // 110\n    } else {                                                                            // 111\n      this.rules = block.gfm;                                                           // 112\n    }                                                                                   // 113\n  }                                                                                     // 114\n}                                                                                       // 115\n                                                                                        // 116\n/**                                                                                     // 117\n * Expose Block Rules                                                                   // 118\n */                                                                                     // 119\n                                                                                        // 120\nLexer.rules = block;                                                                    // 121\n                                                                                        // 122\n/**                                                                                     // 123\n * Static Lex Method                                                                    // 124\n */                                                                                     // 125\n                                                                                        // 126\nLexer.lex = function(src, options) {                                                    // 127\n  var lexer = new Lexer(options);                                                       // 128\n  return lexer.lex(src);                                                                // 129\n};                                                                                      // 130\n                                                                                        // 131\n/**                                                                                     // 132\n * Preprocessing                                                                        // 133\n */                                                                                     // 134\n                                                                                        // 135\nLexer.prototype.lex = function(src) {                                                   // 136\n  src = src                                                                             // 137\n    .replace(/\\r\\n|\\r/g, '\\n')                                                          // 138\n    .replace(/\\t/g, '    ')                                                             // 139\n    .replace(/\\u00a0/g, ' ')                                                            // 140\n    .replace(/\\u2424/g, '\\n');                                                          // 141\n                                                                                        // 142\n  return this.token(src, true);                                                         // 143\n};                                                                                      // 144\n                                                                                        // 145\n/**                                                                                     // 146\n * Lexing                                                                               // 147\n */                                                                                     // 148\n                                                                                        // 149\nLexer.prototype.token = function(src, top, bq) {                                        // 150\n  var src = src.replace(/^ +$/gm, '')                                                   // 151\n    , next                                                                              // 152\n    , loose                                                                             // 153\n    , cap                                                                               // 154\n    , bull                                                                              // 155\n    , b                                                                                 // 156\n    , item                                                                              // 157\n    , space                                                                             // 158\n    , i                                                                                 // 159\n    , l;                                                                                // 160\n                                                                                        // 161\n  while (src) {                                                                         // 162\n    // newline                                                                          // 163\n    if (cap = this.rules.newline.exec(src)) {                                           // 164\n      src = src.substring(cap[0].length);                                               // 165\n      if (cap[0].length > 1) {                                                          // 166\n        this.tokens.push({                                                              // 167\n          type: 'space'                                                                 // 168\n        });                                                                             // 169\n      }                                                                                 // 170\n    }                                                                                   // 171\n                                                                                        // 172\n    // code                                                                             // 173\n    if (cap = this.rules.code.exec(src)) {                                              // 174\n      src = src.substring(cap[0].length);                                               // 175\n      cap = cap[0].replace(/^ {4}/gm, '');                                              // 176\n      this.tokens.push({                                                                // 177\n        type: 'code',                                                                   // 178\n        text: !this.options.pedantic                                                    // 179\n          ? cap.replace(/\\n+$/, '')                                                     // 180\n          : cap                                                                         // 181\n      });                                                                               // 182\n      continue;                                                                         // 183\n    }                                                                                   // 184\n                                                                                        // 185\n    // fences (gfm)                                                                     // 186\n    if (cap = this.rules.fences.exec(src)) {                                            // 187\n      src = src.substring(cap[0].length);                                               // 188\n      this.tokens.push({                                                                // 189\n        type: 'code',                                                                   // 190\n        lang: cap[2],                                                                   // 191\n        text: cap[3] || ''                                                              // 192\n      });                                                                               // 193\n      continue;                                                                         // 194\n    }                                                                                   // 195\n                                                                                        // 196\n    // heading                                                                          // 197\n    if (cap = this.rules.heading.exec(src)) {                                           // 198\n      src = src.substring(cap[0].length);                                               // 199\n      this.tokens.push({                                                                // 200\n        type: 'heading',                                                                // 201\n        depth: cap[1].length,                                                           // 202\n        text: cap[2]                                                                    // 203\n      });                                                                               // 204\n      continue;                                                                         // 205\n    }                                                                                   // 206\n                                                                                        // 207\n    // table no leading pipe (gfm)                                                      // 208\n    if (top && (cap = this.rules.nptable.exec(src))) {                                  // 209\n      src = src.substring(cap[0].length);                                               // 210\n                                                                                        // 211\n      item = {                                                                          // 212\n        type: 'table',                                                                  // 213\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 214\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 215\n        cells: cap[3].replace(/\\n$/, '').split('\\n')                                    // 216\n      };                                                                                // 217\n                                                                                        // 218\n      for (i = 0; i < item.align.length; i++) {                                         // 219\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 220\n          item.align[i] = 'right';                                                      // 221\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 222\n          item.align[i] = 'center';                                                     // 223\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 224\n          item.align[i] = 'left';                                                       // 225\n        } else {                                                                        // 226\n          item.align[i] = null;                                                         // 227\n        }                                                                               // 228\n      }                                                                                 // 229\n                                                                                        // 230\n      for (i = 0; i < item.cells.length; i++) {                                         // 231\n        item.cells[i] = item.cells[i].split(/ *\\| */);                                  // 232\n      }                                                                                 // 233\n                                                                                        // 234\n      this.tokens.push(item);                                                           // 235\n                                                                                        // 236\n      continue;                                                                         // 237\n    }                                                                                   // 238\n                                                                                        // 239\n    // lheading                                                                         // 240\n    if (cap = this.rules.lheading.exec(src)) {                                          // 241\n      src = src.substring(cap[0].length);                                               // 242\n      this.tokens.push({                                                                // 243\n        type: 'heading',                                                                // 244\n        depth: cap[2] === '=' ? 1 : 2,                                                  // 245\n        text: cap[1]                                                                    // 246\n      });                                                                               // 247\n      continue;                                                                         // 248\n    }                                                                                   // 249\n                                                                                        // 250\n    // hr                                                                               // 251\n    if (cap = this.rules.hr.exec(src)) {                                                // 252\n      src = src.substring(cap[0].length);                                               // 253\n      this.tokens.push({                                                                // 254\n        type: 'hr'                                                                      // 255\n      });                                                                               // 256\n      continue;                                                                         // 257\n    }                                                                                   // 258\n                                                                                        // 259\n    // blockquote                                                                       // 260\n    if (cap = this.rules.blockquote.exec(src)) {                                        // 261\n      src = src.substring(cap[0].length);                                               // 262\n                                                                                        // 263\n      this.tokens.push({                                                                // 264\n        type: 'blockquote_start'                                                        // 265\n      });                                                                               // 266\n                                                                                        // 267\n      cap = cap[0].replace(/^ *> ?/gm, '');                                             // 268\n                                                                                        // 269\n      // Pass `top` to keep the current                                                 // 270\n      // \"toplevel\" state. This is exactly                                              // 271\n      // how markdown.pl works.                                                         // 272\n      this.token(cap, top, true);                                                       // 273\n                                                                                        // 274\n      this.tokens.push({                                                                // 275\n        type: 'blockquote_end'                                                          // 276\n      });                                                                               // 277\n                                                                                        // 278\n      continue;                                                                         // 279\n    }                                                                                   // 280\n                                                                                        // 281\n    // list                                                                             // 282\n    if (cap = this.rules.list.exec(src)) {                                              // 283\n      src = src.substring(cap[0].length);                                               // 284\n      bull = cap[2];                                                                    // 285\n                                                                                        // 286\n      this.tokens.push({                                                                // 287\n        type: 'list_start',                                                             // 288\n        ordered: bull.length > 1                                                        // 289\n      });                                                                               // 290\n                                                                                        // 291\n      // Get each top-level item.                                                       // 292\n      cap = cap[0].match(this.rules.item);                                              // 293\n                                                                                        // 294\n      next = false;                                                                     // 295\n      l = cap.length;                                                                   // 296\n      i = 0;                                                                            // 297\n                                                                                        // 298\n      for (; i < l; i++) {                                                              // 299\n        item = cap[i];                                                                  // 300\n                                                                                        // 301\n        // Remove the list item's bullet                                                // 302\n        // so it is seen as the next token.                                             // 303\n        space = item.length;                                                            // 304\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');                                  // 305\n                                                                                        // 306\n        // Outdent whatever the                                                         // 307\n        // list item contains. Hacky.                                                   // 308\n        if (~item.indexOf('\\n ')) {                                                     // 309\n          space -= item.length;                                                         // 310\n          item = !this.options.pedantic                                                 // 311\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')                 // 312\n            : item.replace(/^ {1,4}/gm, '');                                            // 313\n        }                                                                               // 314\n                                                                                        // 315\n        // Determine whether the next list item belongs here.                           // 316\n        // Backpedal if it does not belong in this list.                                // 317\n        if (this.options.smartLists && i !== l - 1) {                                   // 318\n          b = block.bullet.exec(cap[i + 1])[0];                                         // 319\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {                       // 320\n            src = cap.slice(i + 1).join('\\n') + src;                                    // 321\n            i = l - 1;                                                                  // 322\n          }                                                                             // 323\n        }                                                                               // 324\n                                                                                        // 325\n        // Determine whether item is loose or not.                                      // 326\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/                                         // 327\n        // for discount behavior.                                                       // 328\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);                                      // 329\n        if (i !== l - 1) {                                                              // 330\n          next = item.charAt(item.length - 1) === '\\n';                                 // 331\n          if (!loose) loose = next;                                                     // 332\n        }                                                                               // 333\n                                                                                        // 334\n        this.tokens.push({                                                              // 335\n          type: loose                                                                   // 336\n            ? 'loose_item_start'                                                        // 337\n            : 'list_item_start'                                                         // 338\n        });                                                                             // 339\n                                                                                        // 340\n        // Recurse.                                                                     // 341\n        this.token(item, false, bq);                                                    // 342\n                                                                                        // 343\n        this.tokens.push({                                                              // 344\n          type: 'list_item_end'                                                         // 345\n        });                                                                             // 346\n      }                                                                                 // 347\n                                                                                        // 348\n      this.tokens.push({                                                                // 349\n        type: 'list_end'                                                                // 350\n      });                                                                               // 351\n                                                                                        // 352\n      continue;                                                                         // 353\n    }                                                                                   // 354\n                                                                                        // 355\n    // html                                                                             // 356\n    if (cap = this.rules.html.exec(src)) {                                              // 357\n      src = src.substring(cap[0].length);                                               // 358\n      this.tokens.push({                                                                // 359\n        type: this.options.sanitize                                                     // 360\n          ? 'paragraph'                                                                 // 361\n          : 'html',                                                                     // 362\n        pre: !this.options.sanitizer                                                    // 363\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),           // 364\n        text: cap[0]                                                                    // 365\n      });                                                                               // 366\n      continue;                                                                         // 367\n    }                                                                                   // 368\n                                                                                        // 369\n    // def                                                                              // 370\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {                             // 371\n      src = src.substring(cap[0].length);                                               // 372\n      this.tokens.links[cap[1].toLowerCase()] = {                                       // 373\n        href: cap[2],                                                                   // 374\n        title: cap[3]                                                                   // 375\n      };                                                                                // 376\n      continue;                                                                         // 377\n    }                                                                                   // 378\n                                                                                        // 379\n    // table (gfm)                                                                      // 380\n    if (top && (cap = this.rules.table.exec(src))) {                                    // 381\n      src = src.substring(cap[0].length);                                               // 382\n                                                                                        // 383\n      item = {                                                                          // 384\n        type: 'table',                                                                  // 385\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 386\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 387\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')                         // 388\n      };                                                                                // 389\n                                                                                        // 390\n      for (i = 0; i < item.align.length; i++) {                                         // 391\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 392\n          item.align[i] = 'right';                                                      // 393\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 394\n          item.align[i] = 'center';                                                     // 395\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 396\n          item.align[i] = 'left';                                                       // 397\n        } else {                                                                        // 398\n          item.align[i] = null;                                                         // 399\n        }                                                                               // 400\n      }                                                                                 // 401\n                                                                                        // 402\n      for (i = 0; i < item.cells.length; i++) {                                         // 403\n        item.cells[i] = item.cells[i]                                                   // 404\n          .replace(/^ *\\| *| *\\| *$/g, '')                                              // 405\n          .split(/ *\\| */);                                                             // 406\n      }                                                                                 // 407\n                                                                                        // 408\n      this.tokens.push(item);                                                           // 409\n                                                                                        // 410\n      continue;                                                                         // 411\n    }                                                                                   // 412\n                                                                                        // 413\n    // top-level paragraph                                                              // 414\n    if (top && (cap = this.rules.paragraph.exec(src))) {                                // 415\n      src = src.substring(cap[0].length);                                               // 416\n      this.tokens.push({                                                                // 417\n        type: 'paragraph',                                                              // 418\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'                                 // 419\n          ? cap[1].slice(0, -1)                                                         // 420\n          : cap[1]                                                                      // 421\n      });                                                                               // 422\n      continue;                                                                         // 423\n    }                                                                                   // 424\n                                                                                        // 425\n    // text                                                                             // 426\n    if (cap = this.rules.text.exec(src)) {                                              // 427\n      // Top-level should never reach here.                                             // 428\n      src = src.substring(cap[0].length);                                               // 429\n      this.tokens.push({                                                                // 430\n        type: 'text',                                                                   // 431\n        text: cap[0]                                                                    // 432\n      });                                                                               // 433\n      continue;                                                                         // 434\n    }                                                                                   // 435\n                                                                                        // 436\n    if (src) {                                                                          // 437\n      throw new                                                                         // 438\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 439\n    }                                                                                   // 440\n  }                                                                                     // 441\n                                                                                        // 442\n  return this.tokens;                                                                   // 443\n};                                                                                      // 444\n                                                                                        // 445\n/**                                                                                     // 446\n * Inline-Level Grammar                                                                 // 447\n */                                                                                     // 448\n                                                                                        // 449\nvar inline = {                                                                          // 450\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,                                                // 451\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,                                                 // 452\n  url: noop,                                                                            // 453\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,                        // 454\n  link: /^!?\\[(inside)\\]\\(href\\)/,                                                      // 455\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,                                            // 456\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,                                           // 457\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,                             // 458\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,                          // 459\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,                                             // 460\n  br: /^ {2,}\\n(?!\\s*$)/,                                                               // 461\n  del: noop,                                                                            // 462\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/                                            // 463\n};                                                                                      // 464\n                                                                                        // 465\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;                              // 466\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;                        // 467\n                                                                                        // 468\ninline.link = replace(inline.link)                                                      // 469\n  ('inside', inline._inside)                                                            // 470\n  ('href', inline._href)                                                                // 471\n  ();                                                                                   // 472\n                                                                                        // 473\ninline.reflink = replace(inline.reflink)                                                // 474\n  ('inside', inline._inside)                                                            // 475\n  ();                                                                                   // 476\n                                                                                        // 477\n/**                                                                                     // 478\n * Normal Inline Grammar                                                                // 479\n */                                                                                     // 480\n                                                                                        // 481\ninline.normal = merge({}, inline);                                                      // 482\n                                                                                        // 483\n/**                                                                                     // 484\n * Pedantic Inline Grammar                                                              // 485\n */                                                                                     // 486\n                                                                                        // 487\ninline.pedantic = merge({}, inline.normal, {                                            // 488\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,             // 489\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/                        // 490\n});                                                                                     // 491\n                                                                                        // 492\n/**                                                                                     // 493\n * GFM Inline Grammar                                                                   // 494\n */                                                                                     // 495\n                                                                                        // 496\ninline.gfm = merge({}, inline.normal, {                                                 // 497\n  escape: replace(inline.escape)('])', '~|])')(),                                       // 498\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,                                          // 499\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,                                                       // 500\n  text: replace(inline.text)                                                            // 501\n    (']|', '~]|')                                                                       // 502\n    ('|', '|https?://|')                                                                // 503\n    ()                                                                                  // 504\n});                                                                                     // 505\n                                                                                        // 506\n/**                                                                                     // 507\n * GFM + Line Breaks Inline Grammar                                                     // 508\n */                                                                                     // 509\n                                                                                        // 510\ninline.breaks = merge({}, inline.gfm, {                                                 // 511\n  br: replace(inline.br)('{2,}', '*')(),                                                // 512\n  text: replace(inline.gfm.text)('{2,}', '*')()                                         // 513\n});                                                                                     // 514\n                                                                                        // 515\n/**                                                                                     // 516\n * Inline Lexer & Compiler                                                              // 517\n */                                                                                     // 518\n                                                                                        // 519\nfunction InlineLexer(links, options) {                                                  // 520\n  this.options = options || marked.defaults;                                            // 521\n  this.links = links;                                                                   // 522\n  this.rules = inline.normal;                                                           // 523\n  this.renderer = this.options.renderer || new Renderer;                                // 524\n  this.renderer.options = this.options;                                                 // 525\n                                                                                        // 526\n  if (!this.links) {                                                                    // 527\n    throw new                                                                           // 528\n      Error('Tokens array requires a `links` property.');                               // 529\n  }                                                                                     // 530\n                                                                                        // 531\n  if (this.options.gfm) {                                                               // 532\n    if (this.options.breaks) {                                                          // 533\n      this.rules = inline.breaks;                                                       // 534\n    } else {                                                                            // 535\n      this.rules = inline.gfm;                                                          // 536\n    }                                                                                   // 537\n  } else if (this.options.pedantic) {                                                   // 538\n    this.rules = inline.pedantic;                                                       // 539\n  }                                                                                     // 540\n}                                                                                       // 541\n                                                                                        // 542\n/**                                                                                     // 543\n * Expose Inline Rules                                                                  // 544\n */                                                                                     // 545\n                                                                                        // 546\nInlineLexer.rules = inline;                                                             // 547\n                                                                                        // 548\n/**                                                                                     // 549\n * Static Lexing/Compiling Method                                                       // 550\n */                                                                                     // 551\n                                                                                        // 552\nInlineLexer.output = function(src, links, options) {                                    // 553\n  var inline = new InlineLexer(links, options);                                         // 554\n  return inline.output(src);                                                            // 555\n};                                                                                      // 556\n                                                                                        // 557\n/**                                                                                     // 558\n * Lexing/Compiling                                                                     // 559\n */                                                                                     // 560\n                                                                                        // 561\nInlineLexer.prototype.output = function(src) {                                          // 562\n  var out = ''                                                                          // 563\n    , link                                                                              // 564\n    , text                                                                              // 565\n    , href                                                                              // 566\n    , cap;                                                                              // 567\n                                                                                        // 568\n  while (src) {                                                                         // 569\n    // escape                                                                           // 570\n    if (cap = this.rules.escape.exec(src)) {                                            // 571\n      src = src.substring(cap[0].length);                                               // 572\n      out += cap[1];                                                                    // 573\n      continue;                                                                         // 574\n    }                                                                                   // 575\n                                                                                        // 576\n    // autolink                                                                         // 577\n    if (cap = this.rules.autolink.exec(src)) {                                          // 578\n      src = src.substring(cap[0].length);                                               // 579\n      if (cap[2] === '@') {                                                             // 580\n        text = cap[1].charAt(6) === ':'                                                 // 581\n          ? this.mangle(cap[1].substring(7))                                            // 582\n          : this.mangle(cap[1]);                                                        // 583\n        href = this.mangle('mailto:') + text;                                           // 584\n      } else {                                                                          // 585\n        text = escape(cap[1]);                                                          // 586\n        href = text;                                                                    // 587\n      }                                                                                 // 588\n      out += this.renderer.link(href, null, text);                                      // 589\n      continue;                                                                         // 590\n    }                                                                                   // 591\n                                                                                        // 592\n    // url (gfm)                                                                        // 593\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {                             // 594\n      src = src.substring(cap[0].length);                                               // 595\n      text = escape(cap[1]);                                                            // 596\n      href = text;                                                                      // 597\n      out += this.renderer.link(href, null, text);                                      // 598\n      continue;                                                                         // 599\n    }                                                                                   // 600\n                                                                                        // 601\n    // tag                                                                              // 602\n    if (cap = this.rules.tag.exec(src)) {                                               // 603\n      if (!this.inLink && /^<a /i.test(cap[0])) {                                       // 604\n        this.inLink = true;                                                             // 605\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {                               // 606\n        this.inLink = false;                                                            // 607\n      }                                                                                 // 608\n      src = src.substring(cap[0].length);                                               // 609\n      out += this.options.sanitize                                                      // 610\n        ? this.options.sanitizer                                                        // 611\n          ? this.options.sanitizer(cap[0])                                              // 612\n          : escape(cap[0])                                                              // 613\n        : cap[0]                                                                        // 614\n      continue;                                                                         // 615\n    }                                                                                   // 616\n                                                                                        // 617\n    // link                                                                             // 618\n    if (cap = this.rules.link.exec(src)) {                                              // 619\n      src = src.substring(cap[0].length);                                               // 620\n      this.inLink = true;                                                               // 621\n      out += this.outputLink(cap, {                                                     // 622\n        href: cap[2],                                                                   // 623\n        title: cap[3]                                                                   // 624\n      });                                                                               // 625\n      this.inLink = false;                                                              // 626\n      continue;                                                                         // 627\n    }                                                                                   // 628\n                                                                                        // 629\n    // reflink, nolink                                                                  // 630\n    if ((cap = this.rules.reflink.exec(src))                                            // 631\n        || (cap = this.rules.nolink.exec(src))) {                                       // 632\n      src = src.substring(cap[0].length);                                               // 633\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');                                   // 634\n      link = this.links[link.toLowerCase()];                                            // 635\n      if (!link || !link.href) {                                                        // 636\n        out += cap[0].charAt(0);                                                        // 637\n        src = cap[0].substring(1) + src;                                                // 638\n        continue;                                                                       // 639\n      }                                                                                 // 640\n      this.inLink = true;                                                               // 641\n      out += this.outputLink(cap, link);                                                // 642\n      this.inLink = false;                                                              // 643\n      continue;                                                                         // 644\n    }                                                                                   // 645\n                                                                                        // 646\n    // strong                                                                           // 647\n    if (cap = this.rules.strong.exec(src)) {                                            // 648\n      src = src.substring(cap[0].length);                                               // 649\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));                       // 650\n      continue;                                                                         // 651\n    }                                                                                   // 652\n                                                                                        // 653\n    // em                                                                               // 654\n    if (cap = this.rules.em.exec(src)) {                                                // 655\n      src = src.substring(cap[0].length);                                               // 656\n      out += this.renderer.em(this.output(cap[2] || cap[1]));                           // 657\n      continue;                                                                         // 658\n    }                                                                                   // 659\n                                                                                        // 660\n    // code                                                                             // 661\n    if (cap = this.rules.code.exec(src)) {                                              // 662\n      src = src.substring(cap[0].length);                                               // 663\n      out += this.renderer.codespan(escape(cap[2], true));                              // 664\n      continue;                                                                         // 665\n    }                                                                                   // 666\n                                                                                        // 667\n    // br                                                                               // 668\n    if (cap = this.rules.br.exec(src)) {                                                // 669\n      src = src.substring(cap[0].length);                                               // 670\n      out += this.renderer.br();                                                        // 671\n      continue;                                                                         // 672\n    }                                                                                   // 673\n                                                                                        // 674\n    // del (gfm)                                                                        // 675\n    if (cap = this.rules.del.exec(src)) {                                               // 676\n      src = src.substring(cap[0].length);                                               // 677\n      out += this.renderer.del(this.output(cap[1]));                                    // 678\n      continue;                                                                         // 679\n    }                                                                                   // 680\n                                                                                        // 681\n    // text                                                                             // 682\n    if (cap = this.rules.text.exec(src)) {                                              // 683\n      src = src.substring(cap[0].length);                                               // 684\n      out += this.renderer.text(escape(this.smartypants(cap[0])));                      // 685\n      continue;                                                                         // 686\n    }                                                                                   // 687\n                                                                                        // 688\n    if (src) {                                                                          // 689\n      throw new                                                                         // 690\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 691\n    }                                                                                   // 692\n  }                                                                                     // 693\n                                                                                        // 694\n  return out;                                                                           // 695\n};                                                                                      // 696\n                                                                                        // 697\n/**                                                                                     // 698\n * Compile Link                                                                         // 699\n */                                                                                     // 700\n                                                                                        // 701\nInlineLexer.prototype.outputLink = function(cap, link) {                                // 702\n  var href = escape(link.href)                                                          // 703\n    , title = link.title ? escape(link.title) : null;                                   // 704\n                                                                                        // 705\n  return cap[0].charAt(0) !== '!'                                                       // 706\n    ? this.renderer.link(href, title, this.output(cap[1]))                              // 707\n    : this.renderer.image(href, title, escape(cap[1]));                                 // 708\n};                                                                                      // 709\n                                                                                        // 710\n/**                                                                                     // 711\n * Smartypants Transformations                                                          // 712\n */                                                                                     // 713\n                                                                                        // 714\nInlineLexer.prototype.smartypants = function(text) {                                    // 715\n  if (!this.options.smartypants) return text;                                           // 716\n  return text                                                                           // 717\n    // em-dashes                                                                        // 718\n    .replace(/---/g, '\\u2014')                                                          // 719\n    // en-dashes                                                                        // 720\n    .replace(/--/g, '\\u2013')                                                           // 721\n    // opening singles                                                                  // 722\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')                                     // 723\n    // closing singles & apostrophes                                                    // 724\n    .replace(/'/g, '\\u2019')                                                            // 725\n    // opening doubles                                                                  // 726\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')                                // 727\n    // closing doubles                                                                  // 728\n    .replace(/\"/g, '\\u201d')                                                            // 729\n    // ellipses                                                                         // 730\n    .replace(/\\.{3}/g, '\\u2026');                                                       // 731\n};                                                                                      // 732\n                                                                                        // 733\n/**                                                                                     // 734\n * Mangle Links                                                                         // 735\n */                                                                                     // 736\n                                                                                        // 737\nInlineLexer.prototype.mangle = function(text) {                                         // 738\n  if (!this.options.mangle) return text;                                                // 739\n  var out = ''                                                                          // 740\n    , l = text.length                                                                   // 741\n    , i = 0                                                                             // 742\n    , ch;                                                                               // 743\n                                                                                        // 744\n  for (; i < l; i++) {                                                                  // 745\n    ch = text.charCodeAt(i);                                                            // 746\n    if (Math.random() > 0.5) {                                                          // 747\n      ch = 'x' + ch.toString(16);                                                       // 748\n    }                                                                                   // 749\n    out += '&#' + ch + ';';                                                             // 750\n  }                                                                                     // 751\n                                                                                        // 752\n  return out;                                                                           // 753\n};                                                                                      // 754\n                                                                                        // 755\n/**                                                                                     // 756\n * Renderer                                                                             // 757\n */                                                                                     // 758\n                                                                                        // 759\nfunction Renderer(options) {                                                            // 760\n  this.options = options || {};                                                         // 761\n}                                                                                       // 762\n                                                                                        // 763\nRenderer.prototype.code = function(code, lang, escaped) {                               // 764\n  if (this.options.highlight) {                                                         // 765\n    var out = this.options.highlight(code, lang);                                       // 766\n    if (out != null && out !== code) {                                                  // 767\n      escaped = true;                                                                   // 768\n      code = out;                                                                       // 769\n    }                                                                                   // 770\n  }                                                                                     // 771\n                                                                                        // 772\n  if (!lang) {                                                                          // 773\n    return '<pre><code>'                                                                // 774\n      + (escaped ? code : escape(code, true))                                           // 775\n      + '\\n</code></pre>';                                                              // 776\n  }                                                                                     // 777\n                                                                                        // 778\n  return '<pre><code class=\"'                                                           // 779\n    + this.options.langPrefix                                                           // 780\n    + escape(lang, true)                                                                // 781\n    + '\">'                                                                              // 782\n    + (escaped ? code : escape(code, true))                                             // 783\n    + '\\n</code></pre>\\n';                                                              // 784\n};                                                                                      // 785\n                                                                                        // 786\nRenderer.prototype.blockquote = function(quote) {                                       // 787\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';                                  // 788\n};                                                                                      // 789\n                                                                                        // 790\nRenderer.prototype.html = function(html) {                                              // 791\n  return html;                                                                          // 792\n};                                                                                      // 793\n                                                                                        // 794\nRenderer.prototype.heading = function(text, level, raw) {                               // 795\n  return '<h'                                                                           // 796\n    + level                                                                             // 797\n    + ' id=\"'                                                                           // 798\n    + this.options.headerPrefix                                                         // 799\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')                                         // 800\n    + '\">'                                                                              // 801\n    + text                                                                              // 802\n    + '</h'                                                                             // 803\n    + level                                                                             // 804\n    + '>\\n';                                                                            // 805\n};                                                                                      // 806\n                                                                                        // 807\nRenderer.prototype.hr = function() {                                                    // 808\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';                                     // 809\n};                                                                                      // 810\n                                                                                        // 811\nRenderer.prototype.list = function(body, ordered) {                                     // 812\n  var type = ordered ? 'ol' : 'ul';                                                     // 813\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';                               // 814\n};                                                                                      // 815\n                                                                                        // 816\nRenderer.prototype.listitem = function(text) {                                          // 817\n  return '<li>' + text + '</li>\\n';                                                     // 818\n};                                                                                      // 819\n                                                                                        // 820\nRenderer.prototype.paragraph = function(text) {                                         // 821\n  return '<p>' + text + '</p>\\n';                                                       // 822\n};                                                                                      // 823\n                                                                                        // 824\nRenderer.prototype.table = function(header, body) {                                     // 825\n  return '<table>\\n'                                                                    // 826\n    + '<thead>\\n'                                                                       // 827\n    + header                                                                            // 828\n    + '</thead>\\n'                                                                      // 829\n    + '<tbody>\\n'                                                                       // 830\n    + body                                                                              // 831\n    + '</tbody>\\n'                                                                      // 832\n    + '</table>\\n';                                                                     // 833\n};                                                                                      // 834\n                                                                                        // 835\nRenderer.prototype.tablerow = function(content) {                                       // 836\n  return '<tr>\\n' + content + '</tr>\\n';                                                // 837\n};                                                                                      // 838\n                                                                                        // 839\nRenderer.prototype.tablecell = function(content, flags) {                               // 840\n  var type = flags.header ? 'th' : 'td';                                                // 841\n  var tag = flags.align                                                                 // 842\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'                           // 843\n    : '<' + type + '>';                                                                 // 844\n  return tag + content + '</' + type + '>\\n';                                           // 845\n};                                                                                      // 846\n                                                                                        // 847\n// span level renderer                                                                  // 848\nRenderer.prototype.strong = function(text) {                                            // 849\n  return '<strong>' + text + '</strong>';                                               // 850\n};                                                                                      // 851\n                                                                                        // 852\nRenderer.prototype.em = function(text) {                                                // 853\n  return '<em>' + text + '</em>';                                                       // 854\n};                                                                                      // 855\n                                                                                        // 856\nRenderer.prototype.codespan = function(text) {                                          // 857\n  return '<code>' + text + '</code>';                                                   // 858\n};                                                                                      // 859\n                                                                                        // 860\nRenderer.prototype.br = function() {                                                    // 861\n  return this.options.xhtml ? '<br/>' : '<br>';                                         // 862\n};                                                                                      // 863\n                                                                                        // 864\nRenderer.prototype.del = function(text) {                                               // 865\n  return '<del>' + text + '</del>';                                                     // 866\n};                                                                                      // 867\n                                                                                        // 868\nRenderer.prototype.link = function(href, title, text) {                                 // 869\n  if (this.options.sanitize) {                                                          // 870\n    try {                                                                               // 871\n      var prot = decodeURIComponent(unescape(href))                                     // 872\n        .replace(/[^\\w:]/g, '')                                                         // 873\n        .toLowerCase();                                                                 // 874\n    } catch (e) {                                                                       // 875\n      return '';                                                                        // 876\n    }                                                                                   // 877\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {         // 878\n      return '';                                                                        // 879\n    }                                                                                   // 880\n  }                                                                                     // 881\n  var out = '<a href=\"' + href + '\"';                                                   // 882\n  if (title) {                                                                          // 883\n    out += ' title=\"' + title + '\"';                                                    // 884\n  }                                                                                     // 885\n  out += '>' + text + '</a>';                                                           // 886\n  return out;                                                                           // 887\n};                                                                                      // 888\n                                                                                        // 889\nRenderer.prototype.image = function(href, title, text) {                                // 890\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';                               // 891\n  if (title) {                                                                          // 892\n    out += ' title=\"' + title + '\"';                                                    // 893\n  }                                                                                     // 894\n  out += this.options.xhtml ? '/>' : '>';                                               // 895\n  return out;                                                                           // 896\n};                                                                                      // 897\n                                                                                        // 898\nRenderer.prototype.text = function(text) {                                              // 899\n  return text;                                                                          // 900\n};                                                                                      // 901\n                                                                                        // 902\n/**                                                                                     // 903\n * Parsing & Compiling                                                                  // 904\n */                                                                                     // 905\n                                                                                        // 906\nfunction Parser(options) {                                                              // 907\n  this.tokens = [];                                                                     // 908\n  this.token = null;                                                                    // 909\n  this.options = options || marked.defaults;                                            // 910\n  this.options.renderer = this.options.renderer || new Renderer;                        // 911\n  this.renderer = this.options.renderer;                                                // 912\n  this.renderer.options = this.options;                                                 // 913\n}                                                                                       // 914\n                                                                                        // 915\n/**                                                                                     // 916\n * Static Parse Method                                                                  // 917\n */                                                                                     // 918\n                                                                                        // 919\nParser.parse = function(src, options, renderer) {                                       // 920\n  var parser = new Parser(options, renderer);                                           // 921\n  return parser.parse(src);                                                             // 922\n};                                                                                      // 923\n                                                                                        // 924\n/**                                                                                     // 925\n * Parse Loop                                                                           // 926\n */                                                                                     // 927\n                                                                                        // 928\nParser.prototype.parse = function(src) {                                                // 929\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);                // 930\n  this.tokens = src.reverse();                                                          // 931\n                                                                                        // 932\n  var out = '';                                                                         // 933\n  while (this.next()) {                                                                 // 934\n    out += this.tok();                                                                  // 935\n  }                                                                                     // 936\n                                                                                        // 937\n  return out;                                                                           // 938\n};                                                                                      // 939\n                                                                                        // 940\n/**                                                                                     // 941\n * Next Token                                                                           // 942\n */                                                                                     // 943\n                                                                                        // 944\nParser.prototype.next = function() {                                                    // 945\n  return this.token = this.tokens.pop();                                                // 946\n};                                                                                      // 947\n                                                                                        // 948\n/**                                                                                     // 949\n * Preview Next Token                                                                   // 950\n */                                                                                     // 951\n                                                                                        // 952\nParser.prototype.peek = function() {                                                    // 953\n  return this.tokens[this.tokens.length - 1] || 0;                                      // 954\n};                                                                                      // 955\n                                                                                        // 956\n/**                                                                                     // 957\n * Parse Text Tokens                                                                    // 958\n */                                                                                     // 959\n                                                                                        // 960\nParser.prototype.parseText = function() {                                               // 961\n  var body = this.token.text;                                                           // 962\n                                                                                        // 963\n  while (this.peek().type === 'text') {                                                 // 964\n    body += '\\n' + this.next().text;                                                    // 965\n  }                                                                                     // 966\n                                                                                        // 967\n  return this.inline.output(body);                                                      // 968\n};                                                                                      // 969\n                                                                                        // 970\n/**                                                                                     // 971\n * Parse Current Token                                                                  // 972\n */                                                                                     // 973\n                                                                                        // 974\nParser.prototype.tok = function() {                                                     // 975\n  switch (this.token.type) {                                                            // 976\n    case 'space': {                                                                     // 977\n      return '';                                                                        // 978\n    }                                                                                   // 979\n    case 'hr': {                                                                        // 980\n      return this.renderer.hr();                                                        // 981\n    }                                                                                   // 982\n    case 'heading': {                                                                   // 983\n      return this.renderer.heading(                                                     // 984\n        this.inline.output(this.token.text),                                            // 985\n        this.token.depth,                                                               // 986\n        this.token.text);                                                               // 987\n    }                                                                                   // 988\n    case 'code': {                                                                      // 989\n      return this.renderer.code(this.token.text,                                        // 990\n        this.token.lang,                                                                // 991\n        this.token.escaped);                                                            // 992\n    }                                                                                   // 993\n    case 'table': {                                                                     // 994\n      var header = ''                                                                   // 995\n        , body = ''                                                                     // 996\n        , i                                                                             // 997\n        , row                                                                           // 998\n        , cell                                                                          // 999\n        , flags                                                                         // 1000\n        , j;                                                                            // 1001\n                                                                                        // 1002\n      // header                                                                         // 1003\n      cell = '';                                                                        // 1004\n      for (i = 0; i < this.token.header.length; i++) {                                  // 1005\n        flags = { header: true, align: this.token.align[i] };                           // 1006\n        cell += this.renderer.tablecell(                                                // 1007\n          this.inline.output(this.token.header[i]),                                     // 1008\n          { header: true, align: this.token.align[i] }                                  // 1009\n        );                                                                              // 1010\n      }                                                                                 // 1011\n      header += this.renderer.tablerow(cell);                                           // 1012\n                                                                                        // 1013\n      for (i = 0; i < this.token.cells.length; i++) {                                   // 1014\n        row = this.token.cells[i];                                                      // 1015\n                                                                                        // 1016\n        cell = '';                                                                      // 1017\n        for (j = 0; j < row.length; j++) {                                              // 1018\n          cell += this.renderer.tablecell(                                              // 1019\n            this.inline.output(row[j]),                                                 // 1020\n            { header: false, align: this.token.align[j] }                               // 1021\n          );                                                                            // 1022\n        }                                                                               // 1023\n                                                                                        // 1024\n        body += this.renderer.tablerow(cell);                                           // 1025\n      }                                                                                 // 1026\n      return this.renderer.table(header, body);                                         // 1027\n    }                                                                                   // 1028\n    case 'blockquote_start': {                                                          // 1029\n      var body = '';                                                                    // 1030\n                                                                                        // 1031\n      while (this.next().type !== 'blockquote_end') {                                   // 1032\n        body += this.tok();                                                             // 1033\n      }                                                                                 // 1034\n                                                                                        // 1035\n      return this.renderer.blockquote(body);                                            // 1036\n    }                                                                                   // 1037\n    case 'list_start': {                                                                // 1038\n      var body = ''                                                                     // 1039\n        , ordered = this.token.ordered;                                                 // 1040\n                                                                                        // 1041\n      while (this.next().type !== 'list_end') {                                         // 1042\n        body += this.tok();                                                             // 1043\n      }                                                                                 // 1044\n                                                                                        // 1045\n      return this.renderer.list(body, ordered);                                         // 1046\n    }                                                                                   // 1047\n    case 'list_item_start': {                                                           // 1048\n      var body = '';                                                                    // 1049\n                                                                                        // 1050\n      while (this.next().type !== 'list_item_end') {                                    // 1051\n        body += this.token.type === 'text'                                              // 1052\n          ? this.parseText()                                                            // 1053\n          : this.tok();                                                                 // 1054\n      }                                                                                 // 1055\n                                                                                        // 1056\n      return this.renderer.listitem(body);                                              // 1057\n    }                                                                                   // 1058\n    case 'loose_item_start': {                                                          // 1059\n      var body = '';                                                                    // 1060\n                                                                                        // 1061\n      while (this.next().type !== 'list_item_end') {                                    // 1062\n        body += this.tok();                                                             // 1063\n      }                                                                                 // 1064\n                                                                                        // 1065\n      return this.renderer.listitem(body);                                              // 1066\n    }                                                                                   // 1067\n    case 'html': {                                                                      // 1068\n      var html = !this.token.pre && !this.options.pedantic                              // 1069\n        ? this.inline.output(this.token.text)                                           // 1070\n        : this.token.text;                                                              // 1071\n      return this.renderer.html(html);                                                  // 1072\n    }                                                                                   // 1073\n    case 'paragraph': {                                                                 // 1074\n      return this.renderer.paragraph(this.inline.output(this.token.text));              // 1075\n    }                                                                                   // 1076\n    case 'text': {                                                                      // 1077\n      return this.renderer.paragraph(this.parseText());                                 // 1078\n    }                                                                                   // 1079\n  }                                                                                     // 1080\n};                                                                                      // 1081\n                                                                                        // 1082\n/**                                                                                     // 1083\n * Helpers                                                                              // 1084\n */                                                                                     // 1085\n                                                                                        // 1086\nfunction escape(html, encode) {                                                         // 1087\n  return html                                                                           // 1088\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')                                  // 1089\n    .replace(/</g, '&lt;')                                                              // 1090\n    .replace(/>/g, '&gt;')                                                              // 1091\n    .replace(/\"/g, '&quot;')                                                            // 1092\n    .replace(/'/g, '&#39;');                                                            // 1093\n}                                                                                       // 1094\n                                                                                        // 1095\nfunction unescape(html) {                                                               // 1096\n  return html.replace(/&([#\\w]+);/g, function(_, n) {                                   // 1097\n    n = n.toLowerCase();                                                                // 1098\n    if (n === 'colon') return ':';                                                      // 1099\n    if (n.charAt(0) === '#') {                                                          // 1100\n      return n.charAt(1) === 'x'                                                        // 1101\n        ? String.fromCharCode(parseInt(n.substring(2), 16))                             // 1102\n        : String.fromCharCode(+n.substring(1));                                         // 1103\n    }                                                                                   // 1104\n    return '';                                                                          // 1105\n  });                                                                                   // 1106\n}                                                                                       // 1107\n                                                                                        // 1108\nfunction replace(regex, opt) {                                                          // 1109\n  regex = regex.source;                                                                 // 1110\n  opt = opt || '';                                                                      // 1111\n  return function self(name, val) {                                                     // 1112\n    if (!name) return new RegExp(regex, opt);                                           // 1113\n    val = val.source || val;                                                            // 1114\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');                                            // 1115\n    regex = regex.replace(name, val);                                                   // 1116\n    return self;                                                                        // 1117\n  };                                                                                    // 1118\n}                                                                                       // 1119\n                                                                                        // 1120\nfunction noop() {}                                                                      // 1121\nnoop.exec = noop;                                                                       // 1122\n                                                                                        // 1123\nfunction merge(obj) {                                                                   // 1124\n  var i = 1                                                                             // 1125\n    , target                                                                            // 1126\n    , key;                                                                              // 1127\n                                                                                        // 1128\n  for (; i < arguments.length; i++) {                                                   // 1129\n    target = arguments[i];                                                              // 1130\n    for (key in target) {                                                               // 1131\n      if (Object.prototype.hasOwnProperty.call(target, key)) {                          // 1132\n        obj[key] = target[key];                                                         // 1133\n      }                                                                                 // 1134\n    }                                                                                   // 1135\n  }                                                                                     // 1136\n                                                                                        // 1137\n  return obj;                                                                           // 1138\n}                                                                                       // 1139\n                                                                                        // 1140\n                                                                                        // 1141\n/**                                                                                     // 1142\n * Marked                                                                               // 1143\n */                                                                                     // 1144\n                                                                                        // 1145\nfunction marked(src, opt, callback) {                                                   // 1146\n  if (callback || typeof opt === 'function') {                                          // 1147\n    if (!callback) {                                                                    // 1148\n      callback = opt;                                                                   // 1149\n      opt = null;                                                                       // 1150\n    }                                                                                   // 1151\n                                                                                        // 1152\n    opt = merge({}, marked.defaults, opt || {});                                        // 1153\n                                                                                        // 1154\n    var highlight = opt.highlight                                                       // 1155\n      , tokens                                                                          // 1156\n      , pending                                                                         // 1157\n      , i = 0;                                                                          // 1158\n                                                                                        // 1159\n    try {                                                                               // 1160\n      tokens = Lexer.lex(src, opt)                                                      // 1161\n    } catch (e) {                                                                       // 1162\n      return callback(e);                                                               // 1163\n    }                                                                                   // 1164\n                                                                                        // 1165\n    pending = tokens.length;                                                            // 1166\n                                                                                        // 1167\n    var done = function(err) {                                                          // 1168\n      if (err) {                                                                        // 1169\n        opt.highlight = highlight;                                                      // 1170\n        return callback(err);                                                           // 1171\n      }                                                                                 // 1172\n                                                                                        // 1173\n      var out;                                                                          // 1174\n                                                                                        // 1175\n      try {                                                                             // 1176\n        out = Parser.parse(tokens, opt);                                                // 1177\n      } catch (e) {                                                                     // 1178\n        err = e;                                                                        // 1179\n      }                                                                                 // 1180\n                                                                                        // 1181\n      opt.highlight = highlight;                                                        // 1182\n                                                                                        // 1183\n      return err                                                                        // 1184\n        ? callback(err)                                                                 // 1185\n        : callback(null, out);                                                          // 1186\n    };                                                                                  // 1187\n                                                                                        // 1188\n    if (!highlight || highlight.length < 3) {                                           // 1189\n      return done();                                                                    // 1190\n    }                                                                                   // 1191\n                                                                                        // 1192\n    delete opt.highlight;                                                               // 1193\n                                                                                        // 1194\n    if (!pending) return done();                                                        // 1195\n                                                                                        // 1196\n    for (; i < tokens.length; i++) {                                                    // 1197\n      (function(token) {                                                                // 1198\n        if (token.type !== 'code') {                                                    // 1199\n          return --pending || done();                                                   // 1200\n        }                                                                               // 1201\n        return highlight(token.text, token.lang, function(err, code) {                  // 1202\n          if (err) return done(err);                                                    // 1203\n          if (code == null || code === token.text) {                                    // 1204\n            return --pending || done();                                                 // 1205\n          }                                                                             // 1206\n          token.text = code;                                                            // 1207\n          token.escaped = true;                                                         // 1208\n          --pending || done();                                                          // 1209\n        });                                                                             // 1210\n      })(tokens[i]);                                                                    // 1211\n    }                                                                                   // 1212\n                                                                                        // 1213\n    return;                                                                             // 1214\n  }                                                                                     // 1215\n  try {                                                                                 // 1216\n    if (opt) opt = merge({}, marked.defaults, opt);                                     // 1217\n    return Parser.parse(Lexer.lex(src, opt), opt);                                      // 1218\n  } catch (e) {                                                                         // 1219\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';             // 1220\n    if ((opt || marked.defaults).silent) {                                              // 1221\n      return '<p>An error occured:</p><pre>'                                            // 1222\n        + escape(e.message + '', true)                                                  // 1223\n        + '</pre>';                                                                     // 1224\n    }                                                                                   // 1225\n    throw e;                                                                            // 1226\n  }                                                                                     // 1227\n}                                                                                       // 1228\n                                                                                        // 1229\n/**                                                                                     // 1230\n * Options                                                                              // 1231\n */                                                                                     // 1232\n                                                                                        // 1233\nmarked.options =                                                                        // 1234\nmarked.setOptions = function(opt) {                                                     // 1235\n  merge(marked.defaults, opt);                                                          // 1236\n  return marked;                                                                        // 1237\n};                                                                                      // 1238\n                                                                                        // 1239\nmarked.defaults = {                                                                     // 1240\n  gfm: true,                                                                            // 1241\n  tables: true,                                                                         // 1242\n  breaks: false,                                                                        // 1243\n  pedantic: false,                                                                      // 1244\n  sanitize: false,                                                                      // 1245\n  sanitizer: null,                                                                      // 1246\n  mangle: true,                                                                         // 1247\n  smartLists: false,                                                                    // 1248\n  silent: false,                                                                        // 1249\n  highlight: null,                                                                      // 1250\n  langPrefix: 'lang-',                                                                  // 1251\n  smartypants: false,                                                                   // 1252\n  headerPrefix: '',                                                                     // 1253\n  renderer: new Renderer,                                                               // 1254\n  xhtml: false                                                                          // 1255\n};                                                                                      // 1256\n                                                                                        // 1257\n/**                                                                                     // 1258\n * Expose                                                                               // 1259\n */                                                                                     // 1260\n                                                                                        // 1261\nmarked.Parser = Parser;                                                                 // 1262\nmarked.parser = Parser.parse;                                                           // 1263\n                                                                                        // 1264\nmarked.Renderer = Renderer;                                                             // 1265\n                                                                                        // 1266\nmarked.Lexer = Lexer;                                                                   // 1267\nmarked.lexer = Lexer.lex;                                                               // 1268\n                                                                                        // 1269\nmarked.InlineLexer = InlineLexer;                                                       // 1270\nmarked.inlineLexer = InlineLexer.output;                                                // 1271\n                                                                                        // 1272\nmarked.parse = marked;                                                                  // 1273\n                                                                                        // 1274\nif (typeof module !== 'undefined' && typeof exports === 'object') {                     // 1275\n  module.exports = marked;                                                              // 1276\n} else if (typeof define === 'function' && define.amd) {                                // 1277\n  define(function() { return marked; });                                                // 1278\n} else {                                                                                // 1279\n  this.marked = marked;                                                                 // 1280\n}                                                                                       // 1281\n                                                                                        // 1282\n}).call(function() {                                                                    // 1283\n  return this || (typeof window !== 'undefined' ? window : global);                     // 1284\n}());                                                                                   // 1285\n                                                                                        // 1286\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/chuangbo:marked/post-marked.js                                              //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nmarked = module.exports;                                                                // 1\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/chuangbo:marked/template-integration.js                                     //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nif (Package.templating) {                                                               // 1\n  var Template = Package.templating.Template;                                           // 2\n  var HTML = Package.htmljs.HTML; // implied by `ui`                                    // 3\n  var Blaze = Package.blaze.Blaze; // implied by `ui`                                   // 4\n                                                                                        // 5\n  Blaze.registerHelper('markdown', Blaze.Template('markdown', function () {             // 6\n    var view = this;                                                                    // 7\n    var content = '';                                                                   // 8\n    if (view.templateContentBlock) {                                                    // 9\n      content = Blaze._toText(view.templateContentBlock, HTML.TEXTMODE.STRING);         // 10\n    }                                                                                   // 11\n    return HTML.Raw(marked(content));                                                   // 12\n  }));                                                                                  // 13\n}                                                                                       // 14\n                                                                                        // 15\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]