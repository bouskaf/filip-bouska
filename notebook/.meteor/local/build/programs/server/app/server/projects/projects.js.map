{"version":3,"sources":["meteor://ðŸ’»app/server/projects/projects.js"],"names":[],"mappings":"yfile":"/server/projects/projects.js","sourcesContent":["Meteor.methods({\n\tloading: function() {\n\t\treturn Session.get('loading');\n\t},\n\teditProject: function(projectId, input) {\n\t\tcheck(projectId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\timages: Match.Optional(Array),\n\t\t\tthumb: Match.Optional(String),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( projectId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('project'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\t\t\t\treturn Projects.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Projects.findOne( { _id: projectId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Projects.update(projectId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddImage: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [],\n\t\t\t\tnewTags;\n\n\t\t\timages.push(image.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveImg: function(projectId, image) {\n\t\tcheck(projectId, String);\n\t\tcheck(image, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar project = Projects.findOne( { _id: projectId } ),\n\t\t\t\timages = project.images || [];\n\n\t\t\tfor ( var i = 0, len = images.length; i !== len; i++ ) {\n\t\t\t\tif ( images[i] === image ) {\n\t\t\t\t\timages.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tProjects.update(projectId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\timages: images.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeleteProject: function(projectId) {\n\t\tcheck(projectId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tProjects.remove(projectId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});"]}