{"version":3,"sources":["meteor://ðŸ’»app/server/blog/blog.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/server/blog/blog.js","sourcesContent":["Meteor.methods({\n\teditPost: function(postId, input) {\n\t\tcheck(postId, String);\n\n\t\t// validate input (do not allow any keys or value types other than those listed below)\n\t\tcheck(input, { \n\t\t\ttitle: Match.Optional(String),\n\t\t\tcontent: Match.Optional(String),\n\t\t\ttags: Match.Optional(Array),\n\t\t\tslug: Match.Optional(String),\n\t\t\tpublished: Match.Optional(Number),\n\t\t\texcerpt: Match.Optional(String),\n\t\t\tstatus: Match.Optional(String)\n\t\t});\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tif ( postId === 'new' ) {\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\t// if the user has submitted a slug, sanitize and use that one\n\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, create a slug from the title\n\t\t\t\t\tvar slug = Meteor.utils.makeSlug(input.title);\n\t\t\t\t\tinput.slug = slug || Meteor.utils.makeSlug('post'); // super fallback if we can't create a slug for whatever reason\n\t\t\t\t}\n\n\t\t\t\treturn Posts.insert(input);\n\t\t\t} else {\n\t\t\t\tvar doc = Posts.findOne( { _id: postId } );\n\n\t\t\t\tif ( input.slug ) {\n\t\t\t\t\tif ( input.slug !== doc.slug ) {\n\t\t\t\t\t\tinput.slug = Meteor.utils.makeSlug(input.slug);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Posts.update(postId, {\n\t\t\t\t\t$set: input\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\taddTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [],\n\t\t\t\tnewTags;\n\n\t\t\ttags.push(tag.trim());\n\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tremoveTag: function(postId, tag) {\n\t\tcheck(postId, String);\n\t\tcheck(tag, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tvar post = Posts.findOne( { _id: postId } ),\n\t\t\t\ttags = post.tags || [];\n\n\t\t\tfor ( var i = 0, len = tags.length; i !== len; i++ ) {\n\t\t\t\tif ( tags[i] === tag ) {\n\t\t\t\t\ttags.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( Meteor.userId() ) {\n\t\t\t\tPosts.update(postId, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttags: tags.sort()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t},\n\tdeletePost: function(postId) {\n\t\tcheck(postId, String);\n\n\t\tif ( Meteor.dkoo.checkUser(this.userId) ) {\n\t\t\tPosts.remove(postId);\n\t\t} else {\n\t\t\tthrow new Meteor.Error(500, 'Not authorized.');\n\t\t}\n\t}\n});"]}